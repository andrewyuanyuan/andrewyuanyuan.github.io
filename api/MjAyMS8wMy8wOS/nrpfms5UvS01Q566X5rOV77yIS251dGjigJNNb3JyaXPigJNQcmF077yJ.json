{"title":"KMP算法（Knuth–Morris–Prat）","date":"2021-03-08T16:00:00.000Z","date_formatted":{"ll":"Mar 9, 2021","L":"03/09/2021","MM-DD":"03-09"},"link":"2021/03/09/算法/KMP算法（Knuth–Morris–Prat）","categories":["Algorithm"],"updated":"2021-04-20T09:41:31.752Z","content":"<h1 id=\"kmp算法（knuth–morris–prat）\">KMP算法（Knuth–Morris–Prat）<a title=\"#kmp算法（knuth–morris–prat）\" href=\"#kmp算法（knuth–morris–prat）\"></a></h1>\n<p>典型例题：</p>\n<ol>\n<li><a href=\"https://leetcode-cn.com/problems/implement-strstr/solution/shi-xian-strstr-by-chenchen-8/\" target=\"_blank\">实现strStr()</a></li>\n</ol>\n<p>本文内容主要来源：</p>\n<p><a href=\"https://leetcode-cn.com/leetbook/read/array-and-string/cpoo6/\" target=\"_blank\">LeetCode-Solution</a></p>\n<p>一种改进的字符串匹配算法，<strong>核心是利用匹配失败后的信息，尽量减少模式串与主串的匹配次数以达到快速匹配的目的。时间复杂度为<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"9.858ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 4244.4 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">O(m+n)</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4F\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6D\" d=\"M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2B\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-4F\" x=\"0\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"763\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-6D\" x=\"1153\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-2B\" x=\"2253\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"3254\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"3854\" y=\"0\"></use>\n</g>\n</svg>。</strong></p>\n<p>KMP算法使用一个数组<code>next</code>来保存<code>P</code>中元素不匹配时，下一步应该重新开始的下标。</p>\n<h2 id=\"构建next数组(重难点)\">构建next数组(重难点)<a title=\"#构建next数组(重难点)\" href=\"#构建next数组(重难点)\"></a></h2>\n<p>构造方法为：<code>next[i]</code>对应的下标，为<code>P[0...i-1]</code>的<strong>最长公共前缀后缀</strong>的长度，令<code>P[0]=-1</code>。</p>\n<p>e.g.</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/006SqI8Pgy1godiv63ctlj30zk0erabb.jpg\" alt=\"8.png\" class=\"φbs\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNext</span>(<span class=\"params\">needle</span>)</span>&#123;<span class=\"comment\">//获取next数组</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> next = [];</span><br><span class=\"line\">    next[<span class=\"number\">0</span>] = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> j = -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; needle.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(j == -<span class=\"number\">1</span> || needle[i] == needle[j])&#123;</span><br><span class=\"line\">            next[++i] = ++j;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            j = next[j]<span class=\"comment\">//回溯</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"具体过程\">具体过程<a title=\"#具体过程\" href=\"#具体过程\"></a></h2>\n<p><img src=\"http://ww1.sinaimg.cn/large/006SqI8Pgy1godiwuv9yej31jf0yt7gt.jpg\" alt=\"8.png\" class=\"φbs\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> strStr = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">haystack, needle</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(needle == <span class=\"string\">&quot;&quot;</span>)\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> next = getNext(needle);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> hi = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ne = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(hi&lt;haystack.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ne == -<span class=\"number\">1</span> || haystack[hi] == needle[ne])&#123;<span class=\"comment\">//相等情况</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ne == needle.length - <span class=\"number\">1</span>)\t<span class=\"keyword\">return</span> (hi - needle.length + <span class=\"number\">1</span>);</span><br><span class=\"line\">            hi++;</span><br><span class=\"line\">            ne++;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;<span class=\"comment\">//失配情况</span></span><br><span class=\"line\">            ne = next[ne];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"每日一题：LC167 两数之和 II - 输入有序数组","link":"2021/03/09/刷题日记/每日一题：LC167 两数之和 II - 输入有序数组"},"next":{"title":"关于stringBuilder","link":"2021/03/08/Java/关于stringBuilder"},"plink":"http://example.com/2021/03/09/算法/KMP算法（Knuth–Morris–Prat）/","toc":[{"id":"kmp算法（knuth–morris–prat）","title":"KMP算法（Knuth–Morris–Prat）","index":"1","children":[{"id":"构建next数组(重难点)","title":"构建next数组(重难点)","index":"1.1"},{"id":"具体过程","title":"具体过程","index":"1.2"}]}]}