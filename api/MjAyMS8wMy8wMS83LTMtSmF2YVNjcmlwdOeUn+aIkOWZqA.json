{"title":"7.3 JavaScript生成器","date":"2021-02-28T16:16:16.000Z","date_formatted":{"ll":"Mar 1, 2021","L":"03/01/2021","MM-DD":"03-01"},"link":"2021/03/01/7-3-JavaScript生成器","tags":["JavaScript"],"categories":["Technique"],"updated":"2021-02-28T16:17:29.988Z","content":"<h1 id=\"7.3-javascript生成器\">7.3 JavaScript生成器<a title=\"#7.3-javascript生成器\" href=\"#7.3-javascript生成器\"></a></h1>\n<p>ECMA6引入的一种极为灵活的结构，拥有在一个函数块内<strong>暂停和恢复代码执行的能力</strong>。</p>\n<p>使用生成器可以<strong>自定义迭代器和实现协程</strong>。</p>\n<h2 id=\"7.3.1-生成器基础\">7.3.1 生成器基础<a title=\"#7.3.1-生成器基础\" href=\"#7.3.1-生成器基础\"></a></h2>\n<p>生成器的形式是一个函数，函数名称前加一个 ‘ ***** ’ 表示它是一个生成器。只要是可以定义函数的地方就可以定义生成器。<strong>表示生成器函数的型号不受两侧空格影响</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//生成器函数声明</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">generatorFn</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">//生成器函数表达式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> generatorFn = <span class=\"function\"><span class=\"keyword\">function</span>*(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"comment\">//作为对象字面量方法的生成器函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> foo = &#123;</span><br><span class=\"line\">    * <span class=\"function\"><span class=\"title\">generatorFn</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//作为类实例方法的生成器函数</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span></span>&#123;</span><br><span class=\"line\">    * <span class=\"function\"><span class=\"title\">generator</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//作为类静态方法的生成器函数</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> * <span class=\"function\"><span class=\"title\">generatorFn</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>生成器一开始处于<strong>暂停执行</strong>（suspended）状态。它实现了迭代器接口，具有<code>next( )</code>方法。调用这个方法会开始或恢复执行。</p>\n<p><code>next()</code>方法的返回值类似于迭代器，有一个<code>done</code>属性和一个<code>value</code> 属性。函数体为空的生成器函数中间不会停留，调用一次<code>next()</code>就会让生成器到达<code>done:true</code>状态。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">generatorFn</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> g = generatorFn();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(g.next);<span class=\"comment\">//[Function: next]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(g.next());<span class=\"comment\">//&#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<p>value属性是生成器函数的返回值，默认值是<code>undefined</code>，可以通过生成器函数的返回值指定：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">generatorFn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&#x27;Foo&#x27;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> g = generatorFn();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(g.next());<span class=\"comment\">//&#123; value: &#x27;Foo&#x27;, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>生成器函数只会在初次调用<code>next()</code>方法后开始执行</strong>。</p>\n<h2 id=\"7.3.2-通过yield中断执行\">7.3.2 通过yield中断执行<a title=\"#7.3.2-通过yield中断执行\" href=\"#7.3.2-通过yield中断执行\"></a></h2>\n<p>在遇到<code>yield</code>前会正常执行，遇到这个关键字，执行会停止，函数作用域的状态会保留。停止执行的生成器函数只能通过在生成器对象上调用<code>next()</code>方法来恢复执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">generatorFn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">yield</span> <span class=\"string\">&#x27;foo&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;bar&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;baz&#x27;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> g = generatorFn();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(g.next());<span class=\"comment\">//&#123; value: &#x27;foo&#x27;, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(g.next());<span class=\"comment\">//&#123; value: &#x27;bar&#x27;, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(g.next());<span class=\"comment\">//&#123; value: &#x27;baz&#x27;, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><strong>生成器函数内部的执行流程会针对每个生成器对象区分作用域。在一个生成器上调用<code>next()</code>不会影响其它生成器。</strong></p>\n</li>\n<li>\n<p>yield关键字<strong>只能在生成器函数内部使用</strong>，用在其它地方会抛出错误。类似函数的return关键字，yield关键字必须直接位于生成器函数定义中。</p>\n</li>\n</ul>\n<hr>\n<ul>\n<li><strong>用法</strong>：</li>\n</ul>\n<ol>\n<li>\n<p><strong>生成器对象作为可迭代对象</strong></p>\n<p>在生成器对象上显式调用<code>next()</code>方法用处并不大。把生成器对象当作可迭代对象使用起来会更方便。</p>\n<p>这样使用生成器会特别有用。e.g. 比如我们需要定义一个可迭代对象，它会产生一个迭代器，这个迭代器会执行指定的次数。使用生成器，可以通过一个简单的循环实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">nTimes</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">yield</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> _ <span class=\"keyword\">of</span> nTimes(<span class=\"number\">3</span>))&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\">&#125;<span class=\"comment\">//foo foo foo</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>使用yield实现输入和输出</strong></p>\n</li>\n</ol>\n<p>除了可以作为函数的中间返回语句使用，yield关键字还可以作为<strong>函数的中间参数使用</strong>。上一次让生成器函数暂停的yield关键字会接收到传给<code>next()</code>方法的第一个值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">generatorFn</span>(<span class=\"params\">initial</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(initial);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">yield</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">yield</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> g = generatorFn(<span class=\"string\">&#x27;foo&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">//第一次调用next()转入的值不会被使用，因为这一次调用是为了开始执行生成器函数</span></span><br><span class=\"line\">g.next(<span class=\"string\">&#x27;bar&#x27;</span>);<span class=\"comment\">//foo</span></span><br><span class=\"line\">g.next(<span class=\"string\">&#x27;baz&#x27;</span>);<span class=\"comment\">//baz</span></span><br><span class=\"line\">g.next(<span class=\"string\">&#x27;qux&#x27;</span>);<span class=\"comment\">//qux</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>yield关键字可以同时作为输入和输出（难理解）</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> * <span class=\"title\">generatorFn</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;foo&#x27;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> g = generatorFn();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(g.next());<span class=\"comment\">//&#123; value: &#x27;foo&#x27;, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(g.next(<span class=\"string\">&#x27;bar&#x27;</span>));<span class=\"comment\">//&#123; value: &#x27;bar&#x27;, done: true &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(g.next(<span class=\"string\">&#x27;qux&#x27;</span>));<span class=\"comment\">//&#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<p>因为函数必须对整个表达式求值才能确定要返回的值，所以它在遇到<code>yield</code>关键字时暂停执行并<br>\n计算出要产生的值：<code>foo</code>。下一次调用<code>next()</code>传入了<code>bar</code>，作为交给同一个<code>yield</code>的值。然后这<br>\n个值被确定为本次生成器函数要返回的值。</p>\n<ol start=\"3\">\n<li>\n<p><strong>产生可迭代对象</strong></p>\n</li>\n<li>\n<p><strong>使用yield*实现递归算法</strong></p>\n</li>\n</ol>\n","next":{"title":"Theme Showcase","link":"2021/02/21/Theme-Showcase"},"plink":"http://example.com/2021/03/01/7-3-JavaScript生成器/","toc":[{"id":"7.3-javascript生成器","title":"7.3 JavaScript生成器","index":"1","children":[{"id":"7.3.1-生成器基础","title":"7.3.1 生成器基础","index":"1.1"},{"id":"7.3.2-通过yield中断执行","title":"7.3.2 通过yield中断执行","index":"1.2"}]}]}