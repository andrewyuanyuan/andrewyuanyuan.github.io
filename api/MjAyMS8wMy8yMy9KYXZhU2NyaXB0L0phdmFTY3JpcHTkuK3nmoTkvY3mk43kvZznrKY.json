{"title":"JavaScript中的位操作符","date":"2021-03-22T16:00:00.000Z","date_formatted":{"ll":"Mar 23, 2021","L":"03/23/2021","MM-DD":"03-23"},"link":"2021/03/23/JavaScript/JavaScript中的位操作符","tags":["JavaScript"],"categories":["JS Technique"],"updated":"2021-03-23T14:52:09.638Z","content":"<h1 id=\"javascript中的位操作符\">JavaScript中的位操作符<a title=\"#javascript中的位操作符\" href=\"#javascript中的位操作符\"></a></h1>\n<p>**位操作符属于数值的底层操作，也就是操作内存中表示数据的的比特（位）。**ECMAScript中的所有数值都以IEEE 754 64位格式存储，但位操作并不直接应用到64位表示，而是先把值转换为32位整数，再进行位操作，之后再把结果转换为64位。对开发者而言，就好像只有32位一样，因为64位整数存储格式是不可见的。既然知道了这些，就只需要考虑32位整数即可。</p>\n<ul>\n<li>\n<p>有符号整数</p>\n<p>使用32位的前31位表示整数值。第32位表示数值的符号，如0表示正，1表示负。这一位称为<strong>符号位</strong>，它的值决定了数值其余部分的格式。</p>\n<ul>\n<li>正值：正值以真正的二进制格式存储，即31位中的每一位都代表2的幂。</li>\n<li>负值：<strong>负值以一种成为二补数（或补码）的二进制编码存储。一个数值的二补数通过如下3个步骤计算得到：</strong>\n<ol>\n<li>确定绝对值的二进制表示（e.g. 对于-18，先确定18的二进制表示）；</li>\n<li>找到数值的一补数（或反码），将每个0变成1，每个1变成0；</li>\n<li>给结果加上1</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<p>JavaScript中的位操作符有以下几个：</p>\n<ol>\n<li>\n<p>按位非<code>~</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num1 = <span class=\"number\">25</span>; \t\t<span class=\"comment\">// 二进制00000000000000000000000000011001</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> num2 = ~num1;   <span class=\"comment\">// 二进制11111111111111111111111111100110</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num2);  <span class=\"comment\">// -26</span></span><br></pre></td></tr></table></figure>\n<p>按位非的最终效果是对数值取反并减1，就如同<code>num2 = -num1-1</code>一样，但是位操作的速度快得多，这是因为位操作是在数值的底层表示上完成的。</p>\n</li>\n<li>\n<p>按位与<code>&amp;</code></p>\n<p><strong>按位与操作本是上就是将两个数的每一个位对齐然后基于真值表中的规则对每一位进行与操作</strong>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"number\">25</span> &amp; <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">// 11001 &amp; 00011</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result); <span class=\"comment\">//1</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>按位或<code>|</code></p>\n</li>\n<li>\n<p>按位异或<code>^</code></p>\n<p>与按位非和按位与的原理和过程大致相同，都需要将参与操作的两个数化为32位再进行操作。</p>\n</li>\n<li>\n<p>左移<code>&lt;&lt;</code></p>\n<p>左移操作符用两个小于号<code>&lt;&lt;</code>表示，会按照指定的位数将数值的所有位向左移动。e.g.  <code>2&lt;&lt;5</code>等于10向左移动5位，即1000000（二进制）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> oldValue = <span class=\"number\">2</span>;\t\t\t\t<span class=\"comment\">//等于而二进制10</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newValue = oldValue &lt;&lt; <span class=\"number\">5</span>;\t<span class=\"comment\">//二进制1000000等于十进制64</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newValue); \t\t\t<span class=\"comment\">//64</span></span><br></pre></td></tr></table></figure>\n<p>注意，左移会保留它所操作数值的符号。</p>\n</li>\n<li>\n<p>有符号右移<code>&gt;&gt;</code></p>\n<p><strong>左移的逆运算。</strong></p>\n</li>\n<li>\n<p>无符号右移<code>&gt;&gt;&gt;</code></p>\n<p>无符号右移用3个大于号表示，会将数值的所有32位都向右移动。对于正数，无符号右移与有符号右移结果相同。仍然以前面有符号右移的例子为例，64向右移5位，会变成2。</p>\n<p>对于负数，有时候差异会非常大。与有符号右移不同，无符号右移会给空位补0，而不管符号位是什么。对正数来说，这跟有符号右移效果相同；但对于负数来说，结果就差太多了，无符号右移操作符将负数的二进制表示当成整数的二进制表示来处理。因为负数是其绝对值的二补数，所有右移之后结果变得非常之大。e.g.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> oldValue = -<span class=\"number\">64</span>; <span class=\"comment\">// 等于二进制11111111111111111111111111000000，为十进制的4294967232</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newValue = oldValue &gt;&gt;&gt; <span class=\"number\">5</span>; <span class=\"comment\">// 等于十进制134217726</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<p>例题：<a href=\"https://leetcode-cn.com/problems/number-of-1-bits/\" target=\"_blank\">191. 位1的个数</a></p>\n<h2 id=\"方法1：循环检查二进制位\">方法1：循环检查二进制位<a title=\"#方法1：循环检查二进制位\" href=\"#方法1：循环检查二进制位\"></a></h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hammingWeight = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">32</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((n&amp;(<span class=\"number\">1</span>&lt;&lt;i))!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            result++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法2：位运算优化\">方法2：位运算优化<a title=\"#方法2：位运算优化\" href=\"#方法2：位运算优化\"></a></h2>\n<p>观察这个运算<code>n&amp;(n-1)</code>，其运算结果恰为把<code>n</code>的二进制位中的最低位<code>1</code>变成<code>0</code>之后的结果。</p>\n<p>e.g. $6&(6-1)=4, 6=(110)_2, 4=(100)\\_2$，运算结果<code>4</code>即为把<code>6</code>的二进制中的最低位的<code>1</code>变成<code>0</code>之后的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> hammingWeight = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)&#123;</span><br><span class=\"line\">        n &amp;= (n-<span class=\"number\">1</span>);</span><br><span class=\"line\">        result++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"每日一题：LC456 132模式","link":"2021/03/24/刷题日记/每日一题：LC456 132模式"},"next":{"title":"每日一题：LC494 目标和（待补充）","link":"2021/03/23/刷题日记/每日一题：LC494 目标和（待补充）"},"plink":"http://example.com/2021/03/23/JavaScript/JavaScript中的位操作符/","toc":[{"id":"javascript中的位操作符","title":"JavaScript中的位操作符","index":"1","children":[{"id":"方法1：循环检查二进制位","title":"方法1：循环检查二进制位","index":"1.1"},{"id":"方法2：位运算优化","title":"方法2：位运算优化","index":"1.2"}]}]}