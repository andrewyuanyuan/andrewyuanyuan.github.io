{"title":"8.5 对象、类与面向对象编程小结","date":"2021-03-27T16:00:00.000Z","date_formatted":{"ll":"Mar 28, 2021","L":"03/28/2021","MM-DD":"03-28"},"link":"2021/03/28/JavaScript/8-5-对象、类与面向对象编程小结","tags":["JavaScript"],"categories":["JS Technique"],"updated":"2021-03-28T15:20:59.151Z","content":"<h1 id=\"对象、类与面向对象编程小结\">对象、类与面向对象编程小结<a title=\"#对象、类与面向对象编程小结\" href=\"#对象、类与面向对象编程小结\"></a></h1>\n<p>对象在执行代码过程中的任何时候都可以被创建和增强，具有极大动态性，并不是严格定义的实体。</p>\n<p>下面的模式适用于创建对象：</p>\n<ul>\n<li>\n<p><strong>工厂模式</strong></p>\n<p>工厂模式就是一个简单的函数，这个函数可以创建对象，为它添加属性和方法，然后返回这个对象。这个模式在构造函数模式出现后就很少用了。</p>\n</li>\n<li>\n<p><strong>使用构造函数模式</strong></p>\n<p>使用构造函数模式可以自定义引用类型，可以使用<code>new</code>关键字像创建内置类型实例一样创建自定义类型的实例。不过，构造函数模式也有不足，主要是其成员无法重用，包括函数。考虑到函数本身是松散的、弱类型的，没有理由让函数不能在多个对象实例间共享。</p>\n</li>\n<li>\n<p><strong>原型模式</strong></p>\n<p>原型模式解决了成员共享的问题，只要是添加到构造函数<code>prototype</code>上的属性和方法就可以共享。<strong>而组合构造函数和原型模式通过构造函数定义实例属性，通过原型定义共享的属性和方法。</strong></p>\n</li>\n</ul>\n<hr>\n<p>JavaScript的<strong>继承主要通过原型链</strong>来实现。</p>\n<p>原型链涉及<strong>把构造函数的原型赋值为另一个类型的实例</strong>。这样一来，子类就可以访问父类的所有属性和方法，就像基于类的继承那样。</p>\n<p><strong>原型链的问题是所有继承的属性和方法都会在对象实例间共享，无法做到实例私有。</strong></p>\n<ul>\n<li>\n<p>盗用构造函数模式</p>\n<p>盗用构造函数模式通过在<strong>子类构造函数中调用父类构造函数</strong>，可以避免这个问题。这样可以让<strong>每个实例继承的属性都是私有的，但要求类型只能通过构造函数模式来定义</strong>（因为子类不能访问父类原型上的方法）。</p>\n</li>\n<li>\n<p>组合继承</p>\n<p>组合继承是目前最流行的继承模式，即<strong>通过原型链继承共享的属性和方法，通过盗用构造函数继承实例属性</strong>。</p>\n</li>\n</ul>\n<p>除了上面两种，还有以下几种继承模式。</p>\n<ul>\n<li>\n<p>原型式继承</p>\n<p>原型式继承可以无需明确定义构造函数而实现继承，本质上是对给定对象执行浅复制。这种操作的结果之后还可以再进一步加强。</p>\n</li>\n<li>\n<p>寄生式继承</p>\n<p><strong>先基于一个对象创建一个新对象，然后再增强这个新对象，最后返回新对象</strong>。这个模式也被用在组合继承中，用于避免重复调用父类构造函数导致的浪费。<strong>寄生式继承被认为是实现基于类型继承的最有效方式。</strong></p>\n</li>\n</ul>\n<hr>\n<p>ECMAScript 6新增的类很大程度上是基于既有原型机制的语法糖。<strong>类的语法可以让开发者优雅地定义向后兼容的类，既可以继承内置类型，也可以继承自定义类型。类有效地跨越了对象实例、对象原型和对象类之间的鸿沟。</strong></p>\n","prev":{"title":"CSS","link":"2021/03/29/HTML&CSS/CSS初步"},"next":{"title":"每日一题：LC21 合并两个有序链表","link":"2021/03/26/刷题日记/每日一题：LC21 合并两个有序链表"},"plink":"http://example.com/2021/03/28/JavaScript/8-5-对象、类与面向对象编程小结/","toc":[{"id":"对象、类与面向对象编程小结","title":"对象、类与面向对象编程小结","index":"1"}]}