{"title":"链表（Linked List）","date":"2021-03-24T16:00:00.000Z","date_formatted":{"ll":"Mar 25, 2021","L":"03/25/2021","MM-DD":"03-25"},"link":"2021/03/25/数据结构/链表（Linked List）","categories":["Data Structure"],"updated":"2021-03-26T08:01:27.555Z","content":"<h1 id=\"链表（linked-list）\">链表（Linked List）<a title=\"#链表（linked-list）\" href=\"#链表（linked-list）\"></a></h1>\n<p>本文主要来源：</p>\n<ol>\n<li><a href=\"https://leetcode-cn.com/leetbook/detail/linked-list/\" target=\"_blank\">LeetBook—链表</a></li>\n</ol>\n<p>链表的题通常需要注意两点：</p>\n<ol>\n<li>舍得用变量，千万别想着节省变量，否则容易被逻辑绕晕；</li>\n<li><code>head</code>有可能需要改动时，先增加一个假<code>head</code>，返回的时候直接取假<code>head.next</code>，这样就不需要为修改<code>head</code>增加一大堆逻辑了。</li>\n</ol>\n<h2 id=\"链表中的双指针（快慢指针）\">链表中的双指针（快慢指针）<a title=\"#链表中的双指针（快慢指针）\" href=\"#链表中的双指针（快慢指针）\"></a></h2>\n<p>模板：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Initialize slow &amp; fast pointers</span></span><br><span class=\"line\">ListNode slow = head;</span><br><span class=\"line\">ListNode fast = head;</span><br><span class=\"line\"><span class=\"comment\">//注意在调用next字段前，始终检查节点是否为空</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(slow!=<span class=\"keyword\">null</span> &amp;&amp; fast!=<span class=\"keyword\">null</span> &amp;&amp; fast.next!==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    slow = slow.next;</span><br><span class=\"line\">    fast = fast.next.next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(slow == fast)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br></pre></td></tr></table></figure>\n<p>典例：</p>\n<ol>\n<li>\n<p><a href=\"https://leetcode-cn.com/problems/linked-list-cycle/\" target=\"_blank\">#141 环形链表</a></p>\n</li>\n<li>\n<p><a href=\"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/\" target=\"_blank\">#160 相交链表</a></p>\n</li>\n<li>\n<p><a href=\"https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/\" target=\"_blank\">#19 删除链表的倒数第 N 个结点</a></p>\n</li>\n<li>\n<p><a href=\"https://leetcode-cn.com/problems/palindrome-linked-list/\" target=\"_blank\">234. 回文链表</a></p>\n</li>\n</ol>\n<h2 id=\"双链表\">双链表<a title=\"#双链表\" href=\"#双链表\"></a></h2>\n<p>双链表中结点结构的典型定义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DoublyListNode</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> val;</span><br><span class=\"line\">    DoublyListNode next, prev;</span><br><span class=\"line\">    DoublyListNode(<span class=\"keyword\">int</span> x)&#123;val = x;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。<br>\naddAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。<br>\naddAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。<br>\naddAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val  的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。<br>\ndeleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ListNode</span>(<span class=\"params\">val, next = <span class=\"literal\">null</span>, prev = <span class=\"literal\">null</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.val = val</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.next = next</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.prev = prev</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLinkedList</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"title\">constructor</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.data = <span class=\"keyword\">new</span> ListNode(<span class=\"string\">&#x27;head&#x27;</span>, <span class=\"keyword\">new</span> ListNode(<span class=\"string\">&#x27;tail&#x27;</span>))</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.data.next.prev = <span class=\"built_in\">this</span>.data</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.len = <span class=\"number\">0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  operate (index) &#123; <span class=\"comment\">// 获得操作节点，主要定位到所需要修改的节点，的前面的节点！！</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cur = <span class=\"built_in\">this</span>.data</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (index-- &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      cur = cur.next</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cur</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  get (index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt;= <span class=\"built_in\">this</span>.len) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> operateNode = <span class=\"built_in\">this</span>.operate(index)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> operateNode.next.val</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  addAtHead (val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cur = <span class=\"keyword\">new</span> ListNode(val, <span class=\"built_in\">this</span>.data.next, <span class=\"built_in\">this</span>.data) <span class=\"comment\">// 建立头部节点</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.data.next = cur <span class=\"comment\">// 正向链接</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.data.next.next.prev = cur <span class=\"comment\">// 反向链接，因为有tail，不需要判断</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.len++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  addAtTail (val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> tail = <span class=\"built_in\">this</span>.operate(<span class=\"built_in\">this</span>.len + <span class=\"number\">1</span>) <span class=\"comment\">// 指向尾部‘tail&#x27;节点</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> cur = <span class=\"keyword\">new</span> ListNode(val, tail, tail.prev) <span class=\"comment\">// 建立尾部节点</span></span><br><span class=\"line\">    tail.prev = cur <span class=\"comment\">// 反向链接</span></span><br><span class=\"line\">    tail.prev.prev.next = cur <span class=\"comment\">// 正向链接</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.len++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  addAtIndex (index, val) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt; <span class=\"built_in\">this</span>.len) &#123; <span class=\"comment\">//不在范围之内，包括this.len，因为有可能在尾部添加</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.addAtHead(val)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index === <span class=\"built_in\">this</span>.len) <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.addAtTail(val)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> operateNode = <span class=\"built_in\">this</span>.operate(index)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cur = <span class=\"keyword\">new</span> ListNode(val, operateNode.next, operateNode)</span><br><span class=\"line\">    operateNode.next = cur</span><br><span class=\"line\">    operateNode.next.next.prev = cur</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.len++</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  deleteAtIndex (index) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &lt; <span class=\"number\">0</span> || index &gt;= <span class=\"built_in\">this</span>.len) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> operateNode = <span class=\"built_in\">this</span>.operate(index)</span><br><span class=\"line\">    operateNode.next = operateNode.next.next</span><br><span class=\"line\">    operateNode.next.prev = operateNode</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.len--</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"每日一题：LC82 删除排序链表中的重复元素Ⅱ阵","link":"2021/03/25/刷题日记/每日一题：LC82 删除排序链表中的重复元素Ⅱ"},"next":{"title":"8.4 类","link":"2021/03/25/JavaScript/8-4-类"},"plink":"http://example.com/2021/03/25/数据结构/链表（Linked List）/","toc":[{"id":"链表（linked-list）","title":"链表（Linked List）","index":"1","children":[{"id":"链表中的双指针（快慢指针）","title":"链表中的双指针（快慢指针）","index":"1.1"},{"id":"双链表","title":"双链表","index":"1.2"}]}]}