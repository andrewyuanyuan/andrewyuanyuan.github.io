{"title":"8.1 理解对象","date":"2021-03-02T09:17:13.000Z","date_formatted":{"ll":"Mar 2, 2021","L":"03/02/2021","MM-DD":"03-02"},"link":"2021/03/02/JavaScript/8-1-理解对象","tags":["JavaScript"],"categories":["JS Technique"],"updated":"2021-03-08T06:52:57.623Z","content":"<p><strong>更新日志：</strong></p>\n<p>2021.3.2：P205-213，8.1.1-8.1.5</p>\n<p>2021.3.7：P214-220，8.1.6-8.1.7</p>\n<h1 id=\"理解对象\">理解对象<a title=\"#理解对象\" href=\"#理解对象\"></a></h1>\n<p>现在通常使用<strong>对象字面量</strong>来创建新对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&quot;Nicholas&quot;</span>,</span><br><span class=\"line\">    age: <span class=\"number\">29</span>,</span><br><span class=\"line\">    job: <span class=\"string\">&quot;Software Engineer&quot;</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">sayName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对象中属性的类型\">对象中属性的类型<a title=\"#对象中属性的类型\" href=\"#对象中属性的类型\"></a></h2>\n<p>ECMA-262使用一些内部特性来描述属性的特征。这些特性是由为JavaScript实现引擎的规范定义的。</p>\n<ol>\n<li>\n<p><strong>数据属性</strong></p>\n<p>数据属性有4个特征描述它们的行为</p>\n<ul>\n<li>\n<p>[[Configurable]]：表示属性是否可以通过delete删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问器属性。</p>\n<p><strong>一旦一个属性被定义为不可配置后，就不能再变回可配置的了。再次调用<code>Object.defineProperty()</code>并修改任何非Writable属性会导致错误</strong></p>\n</li>\n<li>\n<p>[[Enumerable]]：表示是否可以通过<code>for-in</code>循环返回</p>\n</li>\n<li>\n<p>[[Writable]]：表示属性的值是否可以被修改</p>\n</li>\n<li>\n<p>[[Value]]：包含属性实际的值</p>\n</li>\n</ul>\n<p>除了[[Value]]的默认值是undefined外，其它的默认值都是true。</p>\n<p><strong>要修改属性的默认特性，必须使用<code>Object.defineProperty()</code>方法。</strong></p>\n<p><code>Object.defineProperty(要给其添加属性的对象, 属性的名称, &#123;四种描述符对象&#125;)</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(person, <span class=\"string\">&quot;name&quot;</span>, &#123;</span><br><span class=\"line\">    writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    value: <span class=\"string\">&quot;Nicholas&quot;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name);<span class=\"comment\">//&quot;Nicholas&quot;</span></span><br><span class=\"line\">person.name = <span class=\"string\">&quot;Andrew&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name);<span class=\"comment\">//&quot;Nicholas&quot;</span></span><br></pre></td></tr></table></figure>\n<p>多数情况下都不要使用这些设置。</p>\n</li>\n<li>\n<p><strong>访问器属性</strong></p>\n<p>不包含数据项。包含一个获取函数（<code>getter</code>）和一个设置函数（<code>setter</code>）。</p>\n<p>访问器函数有4个特征描述它们的行为：</p>\n<ul>\n<li>[[Configurable]]：表示属性是否可以通过delete删除并重新定义，是否可以修改它的特性，以及是否可以把它改为数据属性。默认为true</li>\n<li>[[Enumerable]]：表示属性是否可以通过<code>for-in</code>循环返回。默认为true</li>\n<li>[[Get]]：获取函数，读取属性时调用。默认为undefined。</li>\n<li>[[Set]]：设置函数，写入属性时调用。默认为undefined。</li>\n</ul>\n<p>同样要求改访问器属性，必须使用<code>Object.defineProperty()</code>方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> book = &#123;</span><br><span class=\"line\">    _year: <span class=\"number\">2017</span>,</span><br><span class=\"line\">    edition: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(book, <span class=\"string\">&quot;year&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.year_;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">newValue</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(newValue &gt; <span class=\"number\">2017</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.year_ = newValue;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.edition += newValue - <span class=\"number\">2017</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">book.year = <span class=\"number\">2018</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(book.edition);<span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<p>获取函数和设置函数都不一定要定义。只定义获取函数是意味着属性是只读的，尝试修改属性会被忽略。严格模式下，尝试写入只定义了获取函数的属性会抛出错误。同样，只有一个设置函数的属性是不能读取的，非严格模式下读取会返回undefined，严格模式下会抛出错误。</p>\n</li>\n</ol>\n<h2 id=\"定义多个属性\">定义多个属性<a title=\"#定义多个属性\" href=\"#定义多个属性\"></a></h2>\n<p>ECMAScript上提供了<code>Object.defineProperties()</code>方法来同时定义多个属性。接收两个参数，要为之添加或修改属性的对象和另一个描述符对象，其属性与要添加或修改的属性一一对应。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> book = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(book, &#123;</span><br><span class=\"line\">    year_:&#123;</span><br><span class=\"line\">        value:<span class=\"number\">2017</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    edition:&#123;</span><br><span class=\"line\">        value:<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.year_;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">newValue</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(newValue &gt; <span class=\"number\">2017</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.year_ = newValue;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.edition += newValue - <span class=\"number\">2017</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"读取属性的特性\">读取属性的特性<a title=\"#读取属性的特性\" href=\"#读取属性的特性\"></a></h2>\n<p>使用<code>Object.getOwnPropertyDescripter()</code>方法可以取得指定属性描述符。这个方法接收两个参数：</p>\n<ol>\n<li>属性所在对象</li>\n<li>要取得其描述符的属性名</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用上面的book对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> descriptor = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(book, <span class=\"string\">&quot;year_&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(descriptor.value);<span class=\"comment\">//2017</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(descriptor.configurable);<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> descriptor.get);<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>ECMAScript 2017新增了<code>Object.getOwnPropertyDescriptor</code>静态方法。这个方法实际上会在每个自有属性上调用<code>Object.getOwnPropertyDescripter()</code>并在一个新对象中返回它们。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyDescriptors(book));</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     year_: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         value: 2017,</span></span><br><span class=\"line\"><span class=\"comment\">//         writable: false,</span></span><br><span class=\"line\"><span class=\"comment\">//         enumerable: false,</span></span><br><span class=\"line\"><span class=\"comment\">//         configurable: false</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//     edition: &#123; value: 1, writable: false, enumerable: false, configurable: false &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//     get: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         value: undefined,</span></span><br><span class=\"line\"><span class=\"comment\">//         writable: false,</span></span><br><span class=\"line\"><span class=\"comment\">//         enumerable: false,</span></span><br><span class=\"line\"><span class=\"comment\">//         configurable: false</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//     set: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         value: undefined,</span></span><br><span class=\"line\"><span class=\"comment\">//         writable: false,</span></span><br><span class=\"line\"><span class=\"comment\">//         enumerable: false,</span></span><br><span class=\"line\"><span class=\"comment\">//         configurable: false</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"合并对象\">合并对象<a title=\"#合并对象\" href=\"#合并对象\"></a></h2>\n<p><code>Object.assign()</code>方法接受一个目标对象和一个或多个源对象作为参数，然后将每个源对象中可枚举和自有属性复制到目标对象。以字符串和符号为键的属性会被复制。对每个符合条件的属性，这个方法会使用源对象上的[[Get]]取得属性的值，然后使用目标对象上的[[Set]]设置属性的值。</p>\n<blockquote>\n<p>可枚举属性：<code>Object.propertyIsEnumerable()</code>返回<code>true</code></p>\n<p>自有属性：<code>Object.hasOwnProperty()</code>返回<code>true</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dest, src, result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//简单复制</span></span><br><span class=\"line\">dest = &#123;&#125;;</span><br><span class=\"line\">src = &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;src&#x27;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">result = <span class=\"built_in\">Object</span>.assign(dest, src);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dest===src);<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dest==src);<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dest===result);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//多个源对象</span></span><br><span class=\"line\">dest = &#123;&#125;;</span><br><span class=\"line\">result = <span class=\"built_in\">Object</span>.assign(dest, &#123;<span class=\"attr\">a</span>:<span class=\"string\">&#x27;foo&#x27;</span>&#125;, &#123;<span class=\"attr\">b</span>:<span class=\"string\">&#x27;bar&#x27;</span>&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);<span class=\"comment\">//&#123; a: &#x27;foo&#x27;, b: &#x27;bar&#x27; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取函数与设置函数</span></span><br><span class=\"line\">dest = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title\">a</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`Invoked dest setter with param <span class=\"subst\">$&#123;val&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">src = &#123;</span><br><span class=\"line\">    value: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title\">a</span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Invoked src getter&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;foo&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(dest,src);</span><br><span class=\"line\"><span class=\"comment\">//Invoked src getter（调用src的获取方法）</span></span><br><span class=\"line\"><span class=\"comment\">//Invoked dest setter with param foo（调用dest的设置方法并传入参数）</span></span><br><span class=\"line\"><span class=\"comment\">//因为这里的设置函数不执行赋值操作（？）</span></span><br><span class=\"line\"><span class=\"comment\">//所以实际上没有把值传递过来</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dest);<span class=\"comment\">//&#123; a: [Setter], value: 1 &#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><code>Object.assign()</code>实际上对每个源对象进行的是<strong>浅复制（浅复制意味着只会复制对象的引用）</strong>。<strong>如果多个源对象都有相同的属性，则使用最后一个复制的值</strong>。</p>\n</li>\n<li>\n<p><strong>此外，从源对象访问器属性取得的值，比如获取函数，会作为一个静态值赋给目标对象。换句话说，不能再两个对象转移获取函数和设置函数。</strong></p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dest, src, result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//覆盖属性</span></span><br><span class=\"line\">dest = &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;dest&#x27;</span>&#125;;</span><br><span class=\"line\">result = <span class=\"built_in\">Object</span>.assign(dest, &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;src1&#x27;</span>, <span class=\"attr\">a</span>:<span class=\"string\">&#x27;foo&#x27;</span>&#125;, &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;src2&#x27;</span>, <span class=\"attr\">b</span>:<span class=\"string\">&#x27;bar&#x27;</span>&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dest);<span class=\"comment\">//&#123; id: &#x27;src2&#x27;, a: &#x27;foo&#x27;, b: &#x27;bar&#x27; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以通过目标对象上的设置函数观察到覆盖的过程</span></span><br><span class=\"line\">dest = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title\">id</span>(<span class=\"params\">x</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = x;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(dest, &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;first&#x27;</span>&#125;, &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;second&#x27;</span>&#125;, &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;third&#x27;</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">//first</span></span><br><span class=\"line\"><span class=\"comment\">//second</span></span><br><span class=\"line\"><span class=\"comment\">//third</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dest);<span class=\"comment\">//&#123; id: [Setter], value: &#x27;third&#x27; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象引用</span></span><br><span class=\"line\">dest = &#123;&#125;;</span><br><span class=\"line\">src = &#123;<span class=\"attr\">a</span>:&#123;&#125;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(dest, src);</span><br><span class=\"line\"><span class=\"comment\">//浅复制意味着只会复制对象的引用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dest);<span class=\"comment\">//&#123; a: &#123;&#125; &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dest.a === src.a);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果赋值期间出错，则操作会中止并退出，同时抛出错误。<code>Object.assign()</code>没有“回滚”之前赋值的概念，因此它是一个尽力而为、可能只会完成部分复制的方法。</li>\n</ul>\n<h2 id=\"对象标识及相等判定-书p213\">对象标识及相等判定 书P213<a title=\"#对象标识及相等判定-书p213\" href=\"#对象标识及相等判定-书p213\"></a></h2>\n<p><code>Object.is()</code>，这个方法和<code>===</code>很像，但同时考虑到了一些边界情况。这个方法必须接受两个参数用于之间的比较。</p>\n<h2 id=\"增强的对象语法\">增强的对象语法<a title=\"#增强的对象语法\" href=\"#增强的对象语法\"></a></h2>\n<p>这里主要是ECMAScript 6为定义和操作对象新增了很多有用的语法糖特性。</p>\n<ol>\n<li>\n<p>属性值简写</p>\n<p>有些时候，在给属性名添加变量的时候，开发者会发现属性名和变量名是一样的。</p>\n<p>为此，简写属性名语法出现了。简写属性名只要使用变量名（不用再写冒号）就会被自动解释为同名的属性键。如果没有找到同名变量，则会抛出ReferenceError。</p>\n<p>e.g.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&quot;Matt&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">    name: name</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person)<span class=\"comment\">//&#123; name:&#x27;Matt&#x27; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//下面这段代码和上面是等价的</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;Matt&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">    name</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person)<span class=\"comment\">//&#123; name:&#x27;Matt&#x27; &#125;</span></span><br></pre></td></tr></table></figure>\n<p>代码压缩程序会在不同作用域之间保留属性名，以防止找不到引用。e.g.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在这里，即使参数标注符只限定于函数作用域，编译器也会保留初始的name标识符</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makePerson</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        name</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = make person(<span class=\"string\">&#x27;Matt&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name);<span class=\"comment\">//Matt</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>可计算属性</p>\n<p>在引入可计算属性之前，如果想要使用变量的值作为属性，则必须先声明对象，然后使用中括号语法来添加属性。换句话说，不能在对象字面量中直接动态命名属性。</p>\n<p>e.g.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nameKey = <span class=\"string\">&#x27;name&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ageKey = <span class=\"string\">&#x27;age&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> jobKey = <span class=\"string\">&#x27;job&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;&#125;;</span><br><span class=\"line\">person[nameKey] = <span class=\"string\">&quot;Matt&quot;</span>;</span><br><span class=\"line\">person[ageKey] = <span class=\"number\">27</span>;</span><br><span class=\"line\">person[jobKey] = <span class=\"string\">&#x27;Software Engineer&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person);<span class=\"comment\">//&#123; name: &#x27;Matt&#x27;, age: 27, job: &#x27;Software Engineer&#x27; &#125;</span></span><br></pre></td></tr></table></figure>\n<p>有了可计算属性后，就可以在对象字面量中完成动态属性赋值。中括号包围的对象属性键告诉运行时将其作为JavaScript表达式而不是字符串来求值：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nameKey = <span class=\"string\">&#x27;name&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ageKey = <span class=\"string\">&#x27;age&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> jobKey = <span class=\"string\">&#x27;job&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">    [nameKey] : <span class=\"string\">&quot;Matt&quot;</span>,</span><br><span class=\"line\">    [ageKey] : <span class=\"number\">27</span>,</span><br><span class=\"line\">    [jobKey] : <span class=\"string\">&#x27;Software Engineer&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person);<span class=\"comment\">//&#123; name: &#x27;Matt&#x27;, age: 27, job: &#x27;Software Engineer&#x27; &#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>因为被当作JavaScript表达式求值，所以可计算属性本身可以是复杂的表达式，在实例化时再求值：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> nameKey = <span class=\"string\">&#x27;name&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> ageKey = <span class=\"string\">&#x27;age&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> jobKey = <span class=\"string\">&#x27;job&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> uniqueToken = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUniqueKey</span>(<span class=\"params\">key</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.613ex\" height=\"2.509ex\" style=\"vertical-align: -0.671ex;\" viewBox=\"0 -791.3 1986 1080.4\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">{key}\\_</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6B\" d=\"M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-65\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-79\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-5F\" d=\"M0 -62V-25H499V-62H0Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-6B\" x=\"0\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-65\" x=\"521\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-79\" x=\"988\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-5F\" x=\"1485\" y=\"0\"></use>\n</g>\n</svg>&#123;uniqueToken++&#125;`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">    [getUniqueKey(nameKey)] : <span class=\"string\">&quot;Matt&quot;</span>,</span><br><span class=\"line\">    [getUniqueKey(ageKey)] : <span class=\"number\">27</span>,</span><br><span class=\"line\">    [getUniqueKey(jobKey)] : <span class=\"string\">&#x27;Software Engineer&#x27;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person);<span class=\"comment\">//&#123; name_0: &#x27;Matt&#x27;, age_1: 27, job_2: &#x27;Software Engineer&#x27; &#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意再可计算属性表达式中抛出任何错误都会中断对象创建，如果计算属性的表达式有副作用，那就要小心了，因为如果表达式抛出错误，那么之前完成的计算是不能回滚的。</p>\n</blockquote>\n</li>\n<li>\n<p>简写方法名</p>\n<p>在给对象定义方法名时，通常都要写一个方法名、冒号，然后再引用一个匿名函数表达式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">    sayName: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`My name is <span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">person.sayName(<span class=\"string\">&#x27;Matt&#x27;</span>);<span class=\"comment\">//My name is Matt</span></span><br></pre></td></tr></table></figure>\n<p>新的简写方法的语法遵循同样的模式，但开发者要放弃给函数表达式命名（不过给作为方法的函数命名通常没什么用）。相应的，这样也可以明显缩短方法声明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//和上面等价</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">sayName</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">`My name is <span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>简写方法名对获取函数和设置函数也是适用的。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">    name_:<span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title\">name</span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;get() is invoked&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name_;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title\">name</span>(<span class=\"params\">name</span>)&#123;<span class=\"comment\">//setter必须有一个formal parameter</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;set() is invoked&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name_ = name;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">sayName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`My name is <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name_&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">person.name = <span class=\"string\">&#x27;Matt&#x27;</span>;<span class=\"comment\">//set() is invoked</span></span><br><span class=\"line\">person.sayName();<span class=\"comment\">//My name is Matt</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name);<span class=\"comment\">//Get() is invoked</span></span><br><span class=\"line\"><span class=\"comment\">//Matt</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>简写方法名与可计算属性键相互兼容</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> methodKey = <span class=\"string\">&#x27;sayName&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">    [methodKey](name)=&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`My name is <span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"对象解构\">对象解构<a title=\"#对象解构\" href=\"#对象解构\"></a></h2>\n<p>ECMA6新增的对象解构语法可以在一条语句中使用嵌套数据实现一个或多个赋值操作。简单来说，<strong>对象解构就是使用与对象匹配的结构来实现对象属性赋值</strong>。</p>\n<ul>\n<li>\n<p>不使用对象解构：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;Matt&#x27;</span>,</span><br><span class=\"line\">    age: <span class=\"number\">27</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> personName = person.name;</span><br><span class=\"line\"><span class=\"keyword\">let</span> personAge = person.age;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(personName);<span class=\"comment\">//Matt</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(personAge);<span class=\"comment\">//27</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>使用对象解构，可以在一个类似对象字面量的结构中，声明多个变量，同时执行多个赋值操作。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;Matt&#x27;</span>,</span><br><span class=\"line\">    age: <span class=\"number\">27</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">name</span>: personName, <span class=\"attr\">age</span>: personAge &#125; = person;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(personName);<span class=\"comment\">//Matt</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(personAge);<span class=\"comment\">//27</span></span><br></pre></td></tr></table></figure>\n<p>如果想让变量直接使用属性的名称，那么可以使用简写语法。e.g.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;Matt&#x27;</span>,</span><br><span class=\"line\">    age: <span class=\"number\">27</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;name, age&#125; = person;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name);<span class=\"comment\">//Matt</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(age);<span class=\"comment\">//27</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>解构赋值不一定与对象的属性一一匹配。赋值时可以忽略某些属性，而如果引用的属性不存在，则该变量的值为undefined。</p>\n<p>也可以在解构的同时定义默认值，适用于前面提到的引用的属性不存在于源对象中的情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&quot;Matt&quot;</span>,</span><br><span class=\"line\">    age: <span class=\"number\">27</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;name, job=<span class=\"string\">&#x27;software engineer&#x27;</span>&#125; = person;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(job);<span class=\"comment\">//software engineer</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>解构在内部使用函数<code>ToObject()</code>（不能在运行时环境中直接访问）把源数据结构转换为对象。这意味着在</p>\n<p>对象结构的上下文中，原始值会被当成对象。这也意味着（根据<code>TobObject()</code>的定义），null和undefined不能被解构，否则会抛出错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;_&#125; = <span class=\"literal\">null</span>;<span class=\"comment\">//TypeError</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;_&#125; = <span class=\"literal\">undefined</span>;<span class=\"comment\">//TypeError</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>解构并不要求变量必须在解构表达式中声明。不过，如果给事先声明的变量赋值，则赋值表达式必须包含在**一对括号<code>()</code>**中：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> personName, personAge;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">\tname:<span class=\"string\">&#x27;Matt&#x27;</span>,</span><br><span class=\"line\">    age:<span class=\"number\">27</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">(&#123;<span class=\"attr\">name</span>:personName, <span class=\"attr\">age</span>:personAge&#125; = person);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(personName, personAge);<span class=\"comment\">//Matt, 27</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ol>\n<li>\n<p><strong>嵌套解构</strong></p>\n<p>解构对于引用嵌套的属性或赋值目标没有限制。为此，可以通过解构来复制对象属性。</p>\n<p>解构赋值可以使用嵌套解构，以匹配嵌套的属性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;Matt&#x27;</span>,</span><br><span class=\"line\">    age: <span class=\"number\">27</span>,</span><br><span class=\"line\">    job:&#123;</span><br><span class=\"line\">        title: <span class=\"string\">&#x27;Software Engineer&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;name, age, <span class=\"attr\">job</span>:&#123;title&#125;&#125; = person;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(title);<span class=\"comment\">//Software Engineer</span></span><br></pre></td></tr></table></figure>\n<p>在外层没有定义的情况下不能使用嵌套解构。无论源对象还是目标对象都一样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">    job: &#123;</span><br><span class=\"line\">        title: <span class=\"string\">&#x27;Software Engineer&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> personCopy = &#123;&#125;;</span><br><span class=\"line\">(&#123;<span class=\"attr\">job</span>:&#123;<span class=\"attr\">title</span>: personCopy.job.title&#125;&#125;=person);</span><br><span class=\"line\"><span class=\"comment\">// Cannot set property &#x27;title&#x27; of undefined</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>部分解构</strong></p>\n<p>需要注意的是，涉及多个属性的赋值解构是一个输出无关的顺序化操作。如果一个解构表达式涉及多个赋值，开始的赋值成功而后面的赋值出错，则整个解构赋值只会完成一部分。e.g.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;Matt&#x27;</span>,</span><br><span class=\"line\">    age: <span class=\"number\">27</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> personName, personBar, personAge;</span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//person.foo是undefiend,因此会抛出错误</span></span><br><span class=\"line\">    (&#123;<span class=\"attr\">name</span>:personName, <span class=\"attr\">foo</span>:&#123;<span class=\"attr\">bar</span>:personBar&#125;, <span class=\"attr\">age</span>:personAge&#125;=person);</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(personName, personBar, personAge);<span class=\"comment\">//Matt undefined undefined</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>参数上下文匹配</strong></p>\n<p>在<strong>函数参数列表</strong>中也可以进行解构赋值。对参数的解构赋值不会影响arguments对象，但可以在函数签名中声明在函数体内使用局部变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;Matt&#x27;</span>,</span><br><span class=\"line\">    age: <span class=\"number\">27</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printPerson</span>(<span class=\"params\">foo, &#123;name, age&#125;, bar</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name, age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printPerson</span>(<span class=\"params\">foo, &#123;name: personName, age: personAge&#125;, bar</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(personName, personAge);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">printPerson(<span class=\"string\">&#x27;1st&#x27;</span>, person, <span class=\"string\">&#x27;2nd&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// [Arguments] &#123; &#x27;0&#x27;: &#x27;1st&#x27;, &#x27;1&#x27;: &#123; name: &#x27;Matt&#x27;, age: 27 &#125;, &#x27;2&#x27;: &#x27;2nd&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// Matt 27</span></span><br><span class=\"line\">printPerson(<span class=\"string\">&#x27;1st&#x27;</span>, person, <span class=\"string\">&#x27;2nd&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// [Arguments] &#123; &#x27;0&#x27;: &#x27;1st&#x27;, &#x27;1&#x27;: &#123; name: &#x27;Matt&#x27;, age: 27 &#125;, &#x27;2&#x27;: &#x27;2nd&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// Matt 27</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n","prev":{"title":"每日一题：LC5 最长回文子串","link":"2021/03/03/刷题日记/每日一题：LC5-最长回文子串"},"next":{"title":"7.3 JavaScript生成器","link":"2021/03/02/JavaScript/7-3-JavaScript生成器"},"plink":"http://example.com/2021/03/02/JavaScript/8-1-理解对象/","toc":[{"id":"理解对象","title":"理解对象","index":"1","children":[{"id":"对象中属性的类型","title":"对象中属性的类型","index":"1.1"},{"id":"定义多个属性","title":"定义多个属性","index":"1.2"},{"id":"读取属性的特性","title":"读取属性的特性","index":"1.3"},{"id":"合并对象","title":"合并对象","index":"1.4"},{"id":"对象标识及相等判定-书p213","title":"对象标识及相等判定 书P213","index":"1.5"},{"id":"增强的对象语法","title":"增强的对象语法","index":"1.6"},{"id":"对象解构","title":"对象解构","index":"1.7"}]}]}