{"title":"动态规划（Dynamic Programming）","date":"2021-03-08T06:38:55.000Z","date_formatted":{"ll":"Mar 8, 2021","L":"03/08/2021","MM-DD":"03-08"},"link":"2021/03/08/算法/动态规划（Dynamic-Programming）","categories":["Algorithm"],"updated":"2021-04-25T15:54:32.653Z","content":"<p>[TOC]</p>\n<h1 id=\"动态规划（dynamic-programming）\">动态规划（Dynamic Programming）<a title=\"#动态规划（dynamic-programming）\" href=\"#动态规划（dynamic-programming）\"></a></h1>\n<p>本文内容来源：</p>\n<p>作者liweiwei1419于<a href=\"https://leetcode-cn.com/problems/longest-palindromic-substring/solution/zhong-xin-kuo-san-dong-tai-gui-hua-by-liweiwei1419/\" target=\"_blank\">LeetCode</a>的总结</p>\n<p><img src=\"/2021/03/08/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%88Dynamic-Programming%EF%BC%89/C:%5CUsers%5CAndew%5CDesktop%5Cdp.jpg\" alt=\"dp\" class=\"φbs\"></p>\n<ol>\n<li>建立状态转移方程：<strong>当作已经知道<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"13.316ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewbox=\"0 -863.1 5733.4 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">f(1)~f(n-1)</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-66\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-66\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"550\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-31\" x=\"940\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"1440\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-66\" x=\"2080\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"2630\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"3020\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-2212\" x=\"3842\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-31\" x=\"4843\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"5343\" y=\"0\"/>\n</g>\n</svg>的值，然后想办法利用它们求得<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.483ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewbox=\"0 -863.1 1930 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">f(n)</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-66\" d=\"M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-66\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"550\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"940\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"1540\" y=\"0\"/>\n</g>\n</svg>。</strong></li>\n<li>缓存并复用以往结果</li>\n<li>顺序从小到大计算</li>\n</ol>\n<h2 id=\"解题思路\">解题思路<a title=\"#解题思路\" href=\"#解题思路\"></a></h2>\n<ol>\n<li>\n<p>思考状态（重点）</p>\n<ul>\n<li>状态的定义，尝试【题目问什么，就把什么设置为状态】</li>\n<li>然后思考【状态如何转移】，如果【状态转移方程】不容易得到，尝试修改定义，目的依然是为了方便得到【状态转移方程】</li>\n</ul>\n</li>\n<li>\n<p>思考状态转移方程（核心、难点）</p>\n<blockquote>\n<p>【状态转移方程】是原始问题不同规模子问题的联系。即大问题的最优解如何由小问题的最优解得到。</p>\n</blockquote>\n<ul>\n<li>常见推导技巧：分类讨论。即：对状态空间进行分类</li>\n<li>归纳【状态转移方程】是一个很灵活的事情，需要具体问题具体分析</li>\n<li>【动态规划】方法依然是【空间换时间】思想的体现，常见的解决问题的过程很像在【填表】</li>\n</ul>\n</li>\n<li>\n<p>思考初始化</p>\n<p>初始化是非常重要的，一步错步步错。初始化状态一定要设置对，才可能得到正确的结果。</p>\n<ul>\n<li>角度1：直接从状态的语义出发</li>\n<li>角度2：如果状态的语义不好思考，就考虑【状态转移方程】的边界需要什么样的初始化条件</li>\n<li>角度3：从【状态转移方程】方程下标看是否需要多设置一行，一列表示【哨兵】，这样可以避免一些特殊情况的讨论</li>\n</ul>\n</li>\n<li>\n<p>思考输出</p>\n<p>有的时候是最后一个状态，有些时候可能汇综合之前计算过的所有状态</p>\n</li>\n<li>\n<p>思考优化空间</p>\n<ul>\n<li>【优化空间】会使得代码难于理解，且是的【状态】丢失原来的语义，初学的时候可以不一步到位。先把代码写正确是更重要；</li>\n<li>【优化空间】在有一种情况下是很有必要的，那就是状态空间非常庞大的时候（处理海量数据），此时空间不够用，就必须【优化空间】；</li>\n<li>非常经典的【优化空间】的典型问题是【0-1 背包】问题和【完全背包】问题。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<p>Updated：April.4th 2021</p>\n<h2 id=\"关于无后效性\">关于无后效性<a title=\"#关于无后效性\" href=\"#关于无后效性\"></a></h2>\n<p>内容参考：<a href=\"https://baike.baidu.com/item/%E6%97%A0%E5%90%8E%E6%95%88%E6%80%A7/1135283?fr=aladdin\" target=\"_blank\">百度百科</a></p>\n<p><strong>无后效性是一个问题可以用动态规划求解的标志之一。</strong></p>\n<p>无后效性指的是如果在某个阶段上过程的状态已知，则从此阶段以后过程的发展变化仅与此阶段的状态有关，而与过程在此阶段以前的阶段所经历过的状态无关。利用动态规划方法求解多杰u但决策过程问题，过程的状态必须具备无后效性。</p>\n<p>具体地说，阶段k中的状态只能通过k+1中的状态通过状态转移方程得来，与其他状态没有关系，特别是与未发生的状态没有关系。</p>\n<h2 id=\"关于背包问题\">关于背包问题<a title=\"#关于背包问题\" href=\"#关于背包问题\"></a></h2>\n<p>内容参考：作者Jackie1995于<a href=\"https://leetcode-cn.com/problems/combination-sum-iv/solution/xi-wang-yong-yi-chong-gui-lu-gao-ding-bei-bao-wen-/\" target=\"_blank\">LeetCode的回答</a></p>\n<p>常见的背包问题有三种类型：</p>\n<ol>\n<li>\n<p><strong>组合问题：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp[i] += dp[i-num];</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/combination-sum-iv/description/\" target=\"_blank\">377. 组合总和 Ⅳ</a>、<a href=\"https://leetcode-cn.com/problems/target-sum/description/\" target=\"_blank\">494. 目标和</a>、<a href=\"https://leetcode-cn.com/problems/coin-change-2/description/\" target=\"_blank\">518. 零钱兑换 II</a></p>\n</li>\n<li>\n<p><strong>True、False问题：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp[i] = dp[i] 或者 dp[i-num];</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/word-break/\" target=\"_blank\">139. 单词拆分</a>、<a href=\"https://leetcode-cn.com/problems/partition-equal-subset-sum/description/\" target=\"_blank\">416. 分割等和子集</a></p>\n</li>\n<li>\n<p><strong>最大最小问题：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp[i] = Math.min(dp[i], dp[i-num]+<span class=\"number\">1</span>) 或者 dp[i] = Math.max(dp[i], dp[i-num]+<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode-cn.com/problems/ones-and-zeroes/description/\" target=\"_blank\">474. 一和零</a>、<a href=\"https://leetcode-cn.com/problems/coin-change/description/\" target=\"_blank\">322. 零钱兑换</a></p>\n</li>\n</ol>\n<h3 id=\"背包问题的判定\">背包问题的判定<a title=\"#背包问题的判定\" href=\"#背包问题的判定\"></a></h3>\n<p>背包问题具备的特征：给定一个<code>target</code>，<code>target</code>可以是数字也可以是字符串，再给定一个数组<code>nums</code>，<code>nums</code>中装的可能是数字，也可能是字符串，问：能否使用<code>nums</code>中的元素做各种排列组合得到<code>target</code>。</p>\n<h2 id=\"拿到疑似背包问题后的思考\">拿到疑似背包问题后的思考<a title=\"#拿到疑似背包问题后的思考\" href=\"#拿到疑似背包问题后的思考\"></a></h2>\n<ol>\n<li>是三种背包问题的哪一种。</li>\n<li>是0-1背包还是完全背包，<strong>也就是题目中给的<code>nums</code>数组是否可以重复使用</strong>。</li>\n<li>如果是组合问题，是否需要考虑元素之间的顺序。需要考虑顺序用有顺序的解法，不需要考虑顺序用对应不考虑顺序的解法。</li>\n</ol>\n<h3 id=\"技巧\">技巧<a title=\"#技巧\" href=\"#技巧\"></a></h3>\n<ol>\n<li>\n<p>如果是0-1背包，即数组中的元素不可重复使用，<code>nums</code>放在外循环，<code>target</code>在内循环，且内循环顺序</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(target, num-<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>如果是完全背包，即数组中的元素可重复使用，<code>nums</code>放在外循环，<code>target</code>在内循环。且内循环正序：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num, target+<span class=\"number\">1</span>):</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>如果组合问题需考虑元素之间的顺序，需将<code>target</code>放在外循环，将<code>nums</code>放在内循环：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, target+<span class=\"number\">1</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","prev":{"title":"双端队列（Double Ended Queue）","link":"2021/03/08/数据结构/双端队列（Double Ended Queue）"},"next":{"title":"每日一题：LC28 实现strStr()","link":"2021/03/08/刷题日记/每日一题：LC28 实现strStr()"},"plink":"http://example.com/2021/03/08/算法/动态规划（Dynamic-Programming）/","toc":[{"id":"动态规划（dynamic-programming）","title":"动态规划（Dynamic Programming）","index":"1","children":[{"id":"解题思路","title":"解题思路","index":"1.1"},{"id":"关于无后效性","title":"关于无后效性","index":"1.2"},{"id":"关于背包问题","title":"关于背包问题","index":"1.3","children":[{"id":"背包问题的判定","title":"背包问题的判定","index":"1.3.1"}]},{"id":"拿到疑似背包问题后的思考","title":"拿到疑似背包问题后的思考","index":"1.4","children":[{"id":"技巧","title":"技巧","index":"1.4.1"}]}]}]}