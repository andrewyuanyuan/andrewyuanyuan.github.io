{"title":"7.2 JavaScript迭代器","date":"2021-03-01T13:14:49.000Z","date_formatted":{"ll":"Mar 1, 2021","L":"03/01/2021","MM-DD":"03-01"},"link":"2021/03/01/JavaScript/7-2-JavaScript迭代器","tags":["JavaScript"],"categories":["JS Technique"],"updated":"2021-03-02T09:17:56.618Z","content":"<h1 id=\"迭代器模式\">迭代器模式<a title=\"#迭代器模式\" href=\"#迭代器模式\"></a></h1>\n<p>迭代器模式：“可迭代对象”结构（iterable）实现了正式的iterable接口，可以通过iterator消费。</p>\n<p>可迭代对象：包含有限元素，具有无歧义的遍历顺序（如数组或集合）。</p>\n<p>Iterable（可迭代）</p>\n<h2 id=\"可迭代协议\">可迭代协议<a title=\"#可迭代协议\" href=\"#可迭代协议\"></a></h2>\n<p>实现了<strong>Iterable Protocol</strong>的对象称为 <strong>可迭代对象（Iterables）</strong>，要求同时具有以下两种能力：</p>\n<ol>\n<li><strong>支持迭代的自我识别能力</strong></li>\n<li><strong>创建实现Iterator接口的对象的能力</strong></li>\n</ol>\n<p>需要实现一个ECMA<code>@@iterator</code>方法，即在键<code>[Symbol.iterator]</code>上提供一个方法。对象被<code>for-of</code>等语言特性调用时，这个方法会被调用。方法应该返回一个**迭代器对象（iterator）**用来迭代。</p>\n<p>这些内置类型实现了Iterable接口：</p>\n<ul>\n<li>字符串</li>\n<li>数组</li>\n<li>映射</li>\n<li>集合</li>\n<li>arguments对象</li>\n<li>NodeList等DOM集合类型</li>\n</ul>\n<p>检查是否存在默认迭代器属性可以暴露这个工厂函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">//这种类型没有实现迭代器工厂函数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num[<span class=\"built_in\">Symbol</span>.iterator]);</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;abc&#x27;</span>;</span><br><span class=\"line\"><span class=\"comment\">//实现了迭代器工厂函数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str[<span class=\"built_in\">Symbol</span>.iterator]);<span class=\"comment\">//[Function: [Symbol.iterator]]</span></span><br><span class=\"line\"><span class=\"comment\">//调用这个工厂函数会生成一个迭代器</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str[<span class=\"built_in\">Symbol</span>.iterator]());<span class=\"comment\">//Object [String Iterator] &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<p>再举一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;Alice&#x27;</span>, <span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Carol&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = arr[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next())    <span class=\"comment\">// &#123; value: &#x27;Alice&#x27;, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next())    <span class=\"comment\">// &#123; value: &#x27;Bob&#x27;, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next())    <span class=\"comment\">// &#123; value: &#x27;Carol&#x27;, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next())    <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n<p>接收可迭代对象的原生语言特性包括：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&#x27;foo&#x27;</span>, <span class=\"string\">&#x27;bar&#x27;</span>, <span class=\"string\">&#x27;baz&#x27;</span>];</span><br><span class=\"line\"><span class=\"comment\">//for-of循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> el <span class=\"keyword\">of</span> arr)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(el);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//数组解构</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,b,c] = arr;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,b,c);</span><br><span class=\"line\"><span class=\"comment\">//扩展操作符</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [...arr];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br><span class=\"line\"><span class=\"comment\">//Array.from()</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = <span class=\"built_in\">Array</span>.from(arr);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3);</span><br><span class=\"line\"><span class=\"comment\">//Set构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set);</span><br><span class=\"line\"><span class=\"comment\">//Map构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> pairs = arr.map(<span class=\"function\">(<span class=\"params\">x,i</span>)=&gt;</span>[x,i]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pairs);</span><br><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(pairs);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map);</span><br></pre></td></tr></table></figure>\n<p>对象原型链上的父类实现了Iterable接口，则这个对象也就实现了这个接口。</p>\n<h2 id=\"迭代器协议\">迭代器协议<a title=\"#迭代器协议\" href=\"#迭代器协议\"></a></h2>\n<p>迭代器API<strong>使用<code>next()</code>方法在可迭代对象中遍历数据</strong>。<br>\n<code>next()</code>方法返回迭代器对象<code>IteratorResult</code>包含两个属性：<code>done</code>和<code>value</code>。</p>\n<ul>\n<li><code>done</code>返回布尔值，表示是否还可以调用<code>next()</code>取得下一个值</li>\n<li><code>value</code>包含可迭代对象的下一个值（<code>done</code>为false），或者是<code>undefined</code>（<code>done</code>为true）。</li>\n</ul>\n<p><code>next()</code>方法按顺序迭代可迭代对象，直至不再产生新值。<br>\n迭代器不知道怎么从可迭代对象中取得下一个值，也不知道可迭代对象有多大。<br>\n只要迭代器到达<code>done：true</code>状态，后续调用next()就一直返回同样的值。</p>\n<p>不同迭代器的实例相互之间没有联系，只会独立地遍历可迭代对象</p>\n<p>可迭代对象在迭代期间被修改了，那么迭代器也会反映相应的变化</p>\n<p>迭代器维护着一个指向可迭代对象的引用，因此迭代器会阻止垃圾回收程序回收可迭代对象。</p>\n<hr>\n<p><strong>显式的迭代器实现</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这个类实现了可迭代接口（Iterable）</span></span><br><span class=\"line\"><span class=\"comment\">//调用默认的迭代器工厂函数会返回一个实现迭代器接口（Iterator）的迭代器对象</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span></span>&#123;</span><br><span class=\"line\">    [<span class=\"built_in\">Symbol</span>.iterator]()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">next</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>&#123;<span class=\"attr\">done</span>: <span class=\"literal\">false</span>, <span class=\"attr\">value</span>:<span class=\"string\">&#x27;foo&#x27;</span>&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> f = <span class=\"keyword\">new</span> Foo();</span><br><span class=\"line\"><span class=\"comment\">//打印出了实现迭代器接口的对象</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f[<span class=\"built_in\">Symbol</span>.iterator]());<span class=\"comment\">//&#123; next: [Function: next] &#125;</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>原生的迭代器实现</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原生的迭代器实现</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a[<span class=\"built_in\">Symbol</span>.iterator]());<span class=\"comment\">//Object [Array Iterator] &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义迭代器-书p188\">自定义迭代器 书P188<a title=\"#自定义迭代器-书p188\" href=\"#自定义迭代器-书p188\"></a></h2>\n<p>我们的自定义对象也可以通过提供一个<code>Symbol.iterator</code>成为Iterable。</p>\n<p>为了让一个可迭代对象能够创建多个迭代器，必须每创建一个迭代器就对应一个新计数器。为此，可以把计数器变量放到闭包里，然后通过闭包返回迭代器。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">limit</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.limit = limit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    [<span class=\"built_in\">Symbol</span>.iterator]()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> count=<span class=\"number\">1</span>, limit = <span class=\"built_in\">this</span>.limit;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">next</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(count &lt;= limit)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">done</span>:<span class=\"literal\">false</span>, <span class=\"attr\">value</span>:count++&#125;;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">done</span>:<span class=\"literal\">true</span>, <span class=\"attr\">value</span>:<span class=\"literal\">undefined</span>&#125;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>e.g. 实现一个50以内的斐波那契数列</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\t[<span class=\"built_in\">Symbol</span>.iterator]: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> a = <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\tb = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\tnext: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">let</span> value = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!a) &#123;</span><br><span class=\"line\">\t\t\t\t\tvalue = a = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!b) &#123;</span><br><span class=\"line\">\t\t\t\t\tvalue = b = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (b &lt; <span class=\"number\">50</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tvalue = a + b;</span><br><span class=\"line\">\t\t\t\t\ta = b;</span><br><span class=\"line\">\t\t\t\t\tb = value;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tdone: value === <span class=\"number\">0</span>,</span><br><span class=\"line\">\t\t\t\t\tvalue</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> obj) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"提前终止迭代器\">提前终止迭代器<a title=\"#提前终止迭代器\" href=\"#提前终止迭代器\"></a></h2>\n<p><code>[Symbol.Iterator]()</code>中可以添加可选的<code>return()</code>方法用于指定在迭代器提前关闭时执行的逻辑。</p>\n<p>执行迭代的结构在想让迭代器知道它不想遍历到可迭代对象耗尽时，就可以“关闭”迭代器。可能的情况包括：</p>\n<ul>\n<li><code>for-of</code> 循环通过<code>break</code>、<code>continue</code>、<code>return</code> 或<code>throw</code>提前退出；</li>\n<li>解构操作并未消费所有值。</li>\n</ul>\n<p><code>return()</code>方法必须返回一个有效的<code>IteratorResult</code>对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">limit</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.limit = limit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    [<span class=\"built_in\">Symbol</span>.iterator]()&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> count = <span class=\"number\">1</span>, limit = <span class=\"built_in\">this</span>.limit;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">            <span class=\"function\"><span class=\"title\">next</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(count&lt;=limit)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">done</span>:<span class=\"literal\">false</span>, <span class=\"attr\">value</span>:count++&#125;;</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">done</span>:<span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"keyword\">return</span>()&#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Exiting early&#x27;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> &#123;<span class=\"attr\">done</span>:<span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>当内置语言结构在发现还有更多值可以迭代，但不会消费这些值时，会自动调用<code>return()</code>方法。</p>\n</li>\n<li>\n<p>如果迭代器没有关闭，则还可以继续从上次离开的地方继续迭代。比如，数组的迭代器就是不能关闭的。</p>\n</li>\n<li>\n<p>因为<code>return()</code>方法是可选的，所以并非所有迭代器都是可关闭的。要知道某个迭代器是否可关闭，可以测试这个迭代器实例的<code>return</code> 属性是不是函数对象。</p>\n</li>\n<li>\n<p>不过，仅仅给一个不可关闭的迭代器增加这个方法并不能让它变成可关闭的。这是因为调用return()不会强制迭代器进入关闭状态。即便如此，<code>return()</code>方法还是会被调用。</p>\n</li>\n</ul>\n<h1 id=\"小结\">小结<a title=\"#小结\" href=\"#小结\"></a></h1>\n<p><strong>迭代器是一个可以由任意对象实现的接口</strong>，支持连续获取对象产出的每一个值。<strong>任何实现<code>Iterable</code>接口的对象都有一个<code>Symbol.iterator</code>属性</strong>，这个属性引用默认迭代器。默认迭代器就像一个迭代器工厂，也就是一个函数，调用之后会产生一个实现<code>Iterator</code>接口的对象。</p>\n<p><strong>迭代器必须通过连续调用next()方法才能连续取得值</strong>，这个方法返回一个<code>IteratorObject</code>。这个对象包含一个<code>done</code>属性和一个<code>value</code>属性。前者是一个布尔值，表示是否还有更多值可以访问；后者包含迭代器返回的当前值。这个接口可以通过手动反复调用<code>next()</code>方法来消费，也可以通过原生消费者，比如<code>for-of</code>循环来自动消费。</p>\n","prev":{"title":"7.3 JavaScript生成器","link":"2021/03/02/JavaScript/7-3-JavaScript生成器"},"next":{"title":"Theme Showcase","link":"2021/02/21/Theme-Showcase"},"plink":"http://example.com/2021/03/01/JavaScript/7-2-JavaScript迭代器/","toc":[{"id":"迭代器模式","title":"迭代器模式","index":"1","children":[{"id":"可迭代协议","title":"可迭代协议","index":"1.1"},{"id":"迭代器协议","title":"迭代器协议","index":"1.2"},{"id":"自定义迭代器-书p188","title":"自定义迭代器 书P188","index":"1.3"},{"id":"提前终止迭代器","title":"提前终止迭代器","index":"1.4"}]},{"id":"小结","title":"小结","index":"2"}]}