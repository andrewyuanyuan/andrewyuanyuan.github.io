{"title":"8.1 理解对象","date":"2021-03-02T09:17:13.000Z","date_formatted":{"ll":"Mar 2, 2021","L":"03/02/2021","MM-DD":"03-02"},"link":"2021/03/02/8-1-理解对象","tags":["JavaScript"],"categories":["JS Technique"],"updated":"2021-03-02T09:17:48.274Z","content":"<p><strong>更新日志：</strong></p>\n<p>2021.3.2：P205-213，8.11-8.15</p>\n<h1 id=\"对象\">对象<a title=\"#对象\" href=\"#对象\"></a></h1>\n<p>现在通常使用<strong>对象字面量</strong>来创建新对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&quot;Nicholas&quot;</span>,</span><br><span class=\"line\">    age: <span class=\"number\">29</span>,</span><br><span class=\"line\">    job: <span class=\"string\">&quot;Software Engineer&quot;</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">sayName</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"对象中属性的类型\">对象中属性的类型<a title=\"#对象中属性的类型\" href=\"#对象中属性的类型\"></a></h2>\n<p>ECMA-262使用一些内部特性来描述属性的特征。这些特性是由为JavaScript实现引擎的规范定义的。</p>\n<ol>\n<li>\n<p><strong>数据属性</strong></p>\n<p>数据属性有4个特征描述它们的行为</p>\n<ul>\n<li>\n<p>[[Configurable]]：表示属性是否可以通过delete删除并重新定义，是否可以修改它的特性，以及是否可以把它改为访问器属性。</p>\n<p><strong>一旦一个属性被定义为不可配置后，就不能再变回可配置的了。再次调用<code>Object.defineProperty()</code>并修改任何非Writable属性会导致错误</strong></p>\n</li>\n<li>\n<p>[[Enumerable]]：表示是否可以通过<code>for-in</code>循环返回</p>\n</li>\n<li>\n<p>[[Writable]]：表示属性的值是否可以被修改</p>\n</li>\n<li>\n<p>[[Value]]：包含属性实际的值</p>\n</li>\n</ul>\n<p>除了[[Value]]的默认值是undefined外，其它的默认值都是true。</p>\n<p><strong>要修改属性的默认特性，必须使用<code>Object.defineProperty()</code>方法。</strong></p>\n<p><code>Object.defineProperty(要给其添加属性的对象, 属性的名称, &#123;四种描述符对象&#125;)</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(person, <span class=\"string\">&quot;name&quot;</span>, &#123;</span><br><span class=\"line\">    writable: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    value: <span class=\"string\">&quot;Nicholas&quot;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name);<span class=\"comment\">//&quot;Nicholas&quot;</span></span><br><span class=\"line\">person.name = <span class=\"string\">&quot;Andrew&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name);<span class=\"comment\">//&quot;Nicholas&quot;</span></span><br></pre></td></tr></table></figure>\n<p>多数情况下都不要使用这些设置。</p>\n</li>\n<li>\n<p><strong>访问器属性</strong></p>\n<p>不包含数据项。包含一个获取函数（<code>getter</code>）和一个设置函数（<code>setter</code>）。</p>\n<p>访问器函数有4个特征描述它们的行为：</p>\n<ul>\n<li>[[Configurable]]：表示属性是否可以通过delete删除并重新定义，是否可以修改它的特性，以及是否可以把它改为数据属性。默认为true</li>\n<li>[[Enumerable]]：表示属性是否可以通过<code>for-in</code>循环返回。默认为true</li>\n<li>[[Get]]：获取函数，读取属性时调用。默认为undefined。</li>\n<li>[[Set]]：设置函数，写入属性时调用。默认为undefined。</li>\n</ul>\n<p>同样要求改访问器属性，必须使用<code>Object.defineProperty()</code>方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> book = &#123;</span><br><span class=\"line\">    _year: <span class=\"number\">2017</span>,</span><br><span class=\"line\">    edition: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(book, <span class=\"string\">&quot;year&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.year_;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">newValue</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(newValue &gt; <span class=\"number\">2017</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.year_ = newValue;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.edition += newValue - <span class=\"number\">2017</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">book.year = <span class=\"number\">2018</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(book.edition);<span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<p>获取函数和设置函数都不一定要定义。只定义获取函数是意味着属性是只读的，尝试修改属性会被忽略。严格模式下，尝试写入只定义了获取函数的属性会抛出错误。同样，只有一个设置函数的属性是不能读取的，非严格模式下读取会返回undefined，严格模式下会抛出错误。</p>\n</li>\n</ol>\n<h2 id=\"定义多个属性\">定义多个属性<a title=\"#定义多个属性\" href=\"#定义多个属性\"></a></h2>\n<p>ECMAScript上提供了<code>Object.defineProperties()</code>方法来同时定义多个属性。接收两个参数，要为之添加或修改属性的对象和另一个描述符对象，其属性与要添加或修改的属性一一对应。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> book = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.defineProperties(book, &#123;</span><br><span class=\"line\">    year_:&#123;</span><br><span class=\"line\">        value:<span class=\"number\">2017</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    edition:&#123;</span><br><span class=\"line\">        value:<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.year_;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">newValue</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(newValue &gt; <span class=\"number\">2017</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.year_ = newValue;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.edition += newValue - <span class=\"number\">2017</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"读取属性的特性\">读取属性的特性<a title=\"#读取属性的特性\" href=\"#读取属性的特性\"></a></h2>\n<p>使用<code>Object.getOwnPropertyDescripter()</code>方法可以取得指定属性描述符。这个方法接收两个参数：</p>\n<ol>\n<li>属性所在对象</li>\n<li>要取得其描述符的属性名</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用上面的book对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> descriptor = <span class=\"built_in\">Object</span>.getOwnPropertyDescriptor(book, <span class=\"string\">&quot;year_&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(descriptor.value);<span class=\"comment\">//2017</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(descriptor.configurable);<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> descriptor.get);<span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n<p>ECMAScript 2017新增了<code>Object.getOwnPropertyDescriptor</code>静态方法。这个方法实际上会在每个自有属性上调用<code>Object.getOwnPropertyDescripter()</code>并在一个新对象中返回它们。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getOwnPropertyDescriptors(book));</span><br><span class=\"line\"><span class=\"comment\">// &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     year_: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         value: 2017,</span></span><br><span class=\"line\"><span class=\"comment\">//         writable: false,</span></span><br><span class=\"line\"><span class=\"comment\">//         enumerable: false,</span></span><br><span class=\"line\"><span class=\"comment\">//         configurable: false</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//     edition: &#123; value: 1, writable: false, enumerable: false, configurable: false &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//     get: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         value: undefined,</span></span><br><span class=\"line\"><span class=\"comment\">//         writable: false,</span></span><br><span class=\"line\"><span class=\"comment\">//         enumerable: false,</span></span><br><span class=\"line\"><span class=\"comment\">//         configurable: false</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//     set: &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//         value: undefined,</span></span><br><span class=\"line\"><span class=\"comment\">//         writable: false,</span></span><br><span class=\"line\"><span class=\"comment\">//         enumerable: false,</span></span><br><span class=\"line\"><span class=\"comment\">//         configurable: false</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"合并对象\">合并对象<a title=\"#合并对象\" href=\"#合并对象\"></a></h2>\n<p><code>Object.assign()</code>方法接受一个目标对象和一个或多个源对象作为参数，然后将每个源对象中可枚举和自有属性复制到目标对象。以字符串和符号为键的属性会被复制。对每个符合条件的属性，这个方法会使用源对象上的[[Get]]取得属性的值，然后使用目标对象上的[[Set]]设置属性的值。</p>\n<blockquote>\n<p>可枚举属性：<code>Object.propertyIsEnumerable()</code>返回<code>true</code></p>\n<p>自有属性：<code>Object.hasOwnProperty()</code>返回<code>true</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dest, src, result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//简单复制</span></span><br><span class=\"line\">dest = &#123;&#125;;</span><br><span class=\"line\">src = &#123;<span class=\"attr\">id</span>: <span class=\"string\">&#x27;src&#x27;</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">result = <span class=\"built_in\">Object</span>.assign(dest, src);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dest===src);<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dest==src);<span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dest===result);<span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//多个源对象</span></span><br><span class=\"line\">dest = &#123;&#125;;</span><br><span class=\"line\">result = <span class=\"built_in\">Object</span>.assign(dest, &#123;<span class=\"attr\">a</span>:<span class=\"string\">&#x27;foo&#x27;</span>&#125;, &#123;<span class=\"attr\">b</span>:<span class=\"string\">&#x27;bar&#x27;</span>&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(result);<span class=\"comment\">//&#123; a: &#x27;foo&#x27;, b: &#x27;bar&#x27; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//获取函数与设置函数</span></span><br><span class=\"line\">dest = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title\">a</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`Invoked dest setter with param <span class=\"subst\">$&#123;val&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">src = &#123;</span><br><span class=\"line\">    value: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"keyword\">get</span> <span class=\"title\">a</span>()&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;Invoked src getter&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&#x27;foo&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(dest,src);</span><br><span class=\"line\"><span class=\"comment\">//Invoked src getter（调用src的获取方法）</span></span><br><span class=\"line\"><span class=\"comment\">//Invoked dest setter with param foo（调用dest的设置方法并传入参数）</span></span><br><span class=\"line\"><span class=\"comment\">//因为这里的设置函数不执行赋值操作（？）</span></span><br><span class=\"line\"><span class=\"comment\">//所以实际上没有把值传递过来</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dest);<span class=\"comment\">//&#123; a: [Setter], value: 1 &#125;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><code>Object.assign()</code>实际上对每个源对象进行的是<strong>浅复制（浅复制意味着只会复制对象的引用）</strong>。<strong>如果多个源对象都有相同的属性，则使用最后一个复制的值</strong>。</p>\n</li>\n<li>\n<p><strong>此外，从源对象访问器属性取得的值，比如获取函数，会作为一个静态值赋给目标对象。换句话说，不能再两个对象转移获取函数和设置函数。</strong></p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dest, src, result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//覆盖属性</span></span><br><span class=\"line\">dest = &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;dest&#x27;</span>&#125;;</span><br><span class=\"line\">result = <span class=\"built_in\">Object</span>.assign(dest, &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;src1&#x27;</span>, <span class=\"attr\">a</span>:<span class=\"string\">&#x27;foo&#x27;</span>&#125;, &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;src2&#x27;</span>, <span class=\"attr\">b</span>:<span class=\"string\">&#x27;bar&#x27;</span>&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dest);<span class=\"comment\">//&#123; id: &#x27;src2&#x27;, a: &#x27;foo&#x27;, b: &#x27;bar&#x27; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以通过目标对象上的设置函数观察到覆盖的过程</span></span><br><span class=\"line\">dest = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">set</span> <span class=\"title\">id</span>(<span class=\"params\">x</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = x;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(dest, &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;first&#x27;</span>&#125;, &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;second&#x27;</span>&#125;, &#123;<span class=\"attr\">id</span>:<span class=\"string\">&#x27;third&#x27;</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">//first</span></span><br><span class=\"line\"><span class=\"comment\">//second</span></span><br><span class=\"line\"><span class=\"comment\">//third</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dest);<span class=\"comment\">//&#123; id: [Setter], value: &#x27;third&#x27; &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对象引用</span></span><br><span class=\"line\">dest = &#123;&#125;;</span><br><span class=\"line\">src = &#123;<span class=\"attr\">a</span>:&#123;&#125;&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(dest, src);</span><br><span class=\"line\"><span class=\"comment\">//浅复制意味着只会复制对象的引用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dest);<span class=\"comment\">//&#123; a: &#123;&#125; &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dest.a === src.a);<span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果赋值期间出错，则操作会中止并退出，同时抛出错误。<code>Object.assign()</code>没有“回滚”之前赋值的概念，因此它是一个尽力而为、可能只会完成部分复制的方法。</li>\n</ul>\n","prev":{"title":"每日一题：LC5 最长回文子串","link":"2021/03/03/每日一题：LC5-最长回文子串"},"next":{"title":"7.3 JavaScript生成器","link":"2021/03/02/7-3-JavaScript生成器"},"plink":"http://example.com/2021/03/02/8-1-理解对象/","toc":[{"id":"对象","title":"对象","index":"1","children":[{"id":"对象中属性的类型","title":"对象中属性的类型","index":"1.1"},{"id":"定义多个属性","title":"定义多个属性","index":"1.2"},{"id":"读取属性的特性","title":"读取属性的特性","index":"1.3"},{"id":"合并对象","title":"合并对象","index":"1.4"}]}]}