{"title":"每日一题：LC200 岛屿数量","date":"2021-03-10T16:00:00.000Z","date_formatted":{"ll":"Mar 11, 2021","L":"03/11/2021","MM-DD":"03-11"},"link":"2021/03/11/刷题日记/每日一题：LC200 岛屿数量","tags":["LeetCode"],"categories":["LeetCode"],"updated":"2021-03-11T09:07:13.797Z","content":"<h1 id=\"每日一题：lc200-岛屿数量\">每日一题：LC200 岛屿数量<a title=\"#每日一题：lc200-岛屿数量\" href=\"#每日一题：lc200-岛屿数量\"></a></h1>\n<p>题目<a href=\"https://leetcode-cn.com/problems/number-of-islands/\" target=\"_blank\">链接</a></p>\n<p>本文内容来源：作者nettee在<a href=\"https://leetcode-cn.com/problems/number-of-islands/solution/dao-yu-lei-wen-ti-de-tong-yong-jie-fa-dfs-bian-li-/\" target=\"_blank\">leetcode</a>上的解答。</p>\n<p>首先明确一点，【岛屿问题是一个系列问题】，解题思路是使用<strong>针对网格类问题的DFS通用思路</strong>。</p>\n<p><strong><a href=\"https://leetcode-cn.com/problems/number-of-islands/\" target=\"_blank\">L200. 岛屿数量</a>-Easy</strong></p>\n<p><strong><a href=\"https://leetcode-cn.com/problems/island-perimeter/\" target=\"_blank\">463. 岛屿的周长</a>-Easy</strong></p>\n<p><strong><a href=\"https://leetcode-cn.com/problems/max-area-of-island/\" target=\"_blank\">695. 岛屿的最大面积</a>-Medium</strong></p>\n<p><strong><a href=\"https://leetcode-cn.com/problems/making-a-large-island/\" target=\"_blank\">827. 最大人工岛</a>-Hard</strong></p>\n<h1 id=\"使用深度优先搜索（dfs）\">使用深度优先搜索（DFS）<a title=\"#使用深度优先搜索（dfs）\" href=\"#使用深度优先搜索（dfs）\"></a></h1>\n<h2 id=\"引入—二叉树上的dfs\">引入—二叉树上的DFS<a title=\"#引入—二叉树上的dfs\" href=\"#引入—二叉树上的dfs\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">traverse</span><span class=\"params\">(TreeNode root)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//判断base case</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//访问两个相邻结点：左子结点、右子结点</span></span><br><span class=\"line\">    traverse(root.left);</span><br><span class=\"line\">    traverse(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可见，二叉树上的DFS的两个要素是：【<strong>判断base case</strong>】和【<strong>访问相邻结点</strong>】</p>\n<p>我们可以根据这两个要素想想网格中的DFS：</p>\n<ul>\n<li>\n<p>判断base case</p>\n<p>需要确定当前访问的<code>grid[r][c]</code>是否在网格里</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean <span class=\"function\"><span class=\"title\">inArea</span>(<span class=\"params\">int[][] grid, int r, int c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>&lt;=c &amp;&amp; c&lt;grid[<span class=\"number\">0</span>].length &amp;&amp; <span class=\"number\">0</span>&lt;=r &amp;&amp; r&lt;grid.length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>访问相邻结点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果坐标(r,c)超出了网格范围，直接返回</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(!inArea(grid, r, c))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//访问上、下、左、右四个相邻网格</span></span><br><span class=\"line\">dfs(grid, r-<span class=\"number\">1</span>, c);</span><br><span class=\"line\">dfs(grid, r+<span class=\"number\">1</span>, c);</span><br><span class=\"line\">dfs(grid, r, c-<span class=\"number\">1</span>);</span><br><span class=\"line\">dfs(grid, r, c+<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"避免重复遍历\">避免重复遍历<a title=\"#避免重复遍历\" href=\"#避免重复遍历\"></a></h2>\n<p>网格解构的DFS和二叉树的DFS的最大区别就是，在网格中的遍历可能会遇到遍历过的结点。因此需要标记遍历过的格子。</p>\n<ul>\n<li>0——海洋</li>\n<li>1——陆地（为遍历）</li>\n<li>2——陆地（已遍历）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(grid[r][c]!=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">grid[r][c]=<span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>为什么最好不要把已经遍历过的陆地标记为1？</strong></p>\n<p>这样就无法区分<strong>海洋</strong>和<strong>已遍历过的陆地格子</strong>了，在题目更加复杂的时候，会出现bug。</p>\n</blockquote>\n<h2 id=\"总结\">总结<a title=\"#总结\" href=\"#总结\"></a></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numIslands</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;grid.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>; j&lt;grid[<span class=\"number\">0</span>].length; j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(grid[i][j]==<span class=\"string\">&#x27;1&#x27;</span>)&#123;</span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                    dfs(grid, i, j);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] grid, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!inArea(grid, r, c))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(grid[r][c]!=<span class=\"string\">&#x27;1&#x27;</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        grid[r][c]=<span class=\"string\">&#x27;2&#x27;</span>;</span><br><span class=\"line\">        dfs(grid,r-<span class=\"number\">1</span>,c);</span><br><span class=\"line\">        dfs(grid,r+<span class=\"number\">1</span>,c);</span><br><span class=\"line\">        dfs(grid,r,c-<span class=\"number\">1</span>);</span><br><span class=\"line\">        dfs(grid,r,c+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">inArea</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] grid, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> c)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>&lt;=c &amp;&amp; c&lt;grid[<span class=\"number\">0</span>].length &amp;&amp; <span class=\"number\">0</span>&lt;=r &amp;&amp; r&lt;grid.length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>时间复杂度：<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"8.088ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 3482.5 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">O(MN)</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4F\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4D\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4E\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-4F\" x=\"0\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"763\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-4D\" x=\"1153\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-4E\" x=\"2204\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"3093\" y=\"0\"></use>\n</g>\n</svg>，其中<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.442ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 1051.5 936.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">M</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4D\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-4D\" x=\"0\" y=\"0\"></use>\n</g>\n</svg>和<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.064ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 888.5 936.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">N</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4E\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-4E\" x=\"0\" y=\"0\"></use>\n</g>\n</svg>分别为行数和列数。</li>\n<li>空间复杂度：<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"8.088ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 3482.5 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">O(MN)</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4F\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4D\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4E\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-4F\" x=\"0\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"763\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-4D\" x=\"1153\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-4E\" x=\"2204\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"3093\" y=\"0\"></use>\n</g>\n</svg>，在最坏情况下，整个网格均为陆地，深度优先搜索的深度达到 <svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.506ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 1940 936.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">MN</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4D\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4E\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-4D\" x=\"0\" y=\"0\"></use>\n <use xlink:href=\"#E1-MJMATHI-4E\" x=\"1051\" y=\"0\"></use>\n</g>\n</svg>。</li>\n</ul>\n<h1 id=\"使用广度优先搜索（bfs）\">使用广度优先搜索（BFS）<a title=\"#使用广度优先搜索（bfs）\" href=\"#使用广度优先搜索（bfs）\"></a></h1>\n<ul>\n<li>借用一个队列<code>queue</code>，判断队列首部结点<code>(i,j)</code>是否未越界且为<code>1</code>：\n<ul>\n<li>若是则置零（删除岛屿结点），并将此结点的上下左右结点<code>(i+1,j)</code>，<code>(i-1,j)</code>，<code>(i,j+1)</code>，<code>(i,j-1)</code>加入队列</li>\n<li>若不是则跳过结点</li>\n</ul>\n</li>\n<li>循环<code>pop</code>队列首结点，直到整个队列为空，此时已经遍历完成此岛屿</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">solution</span></span>&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">numIslands</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] grid)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; grid.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; grid[<span class=\"number\">0</span>].length; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(grid[i][j] == <span class=\"string\">&#x27;1&#x27;</span>)&#123;</span><br><span class=\"line\">                    bfs(grid, i, j);</span><br><span class=\"line\">                    count++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">char</span>[][] grid, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span></span>&#123;</span><br><span class=\"line\">        Queue&lt;<span class=\"keyword\">int</span>[]&gt; list = <span class=\"keyword\">new</span> LinkedList&lt;&gt;();</span><br><span class=\"line\">        list.add(<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[] &#123;i,j&#125;);<span class=\"comment\">//将当前结点加入list之中</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(!list.isEmpty())&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span>[] cur = list.remove();</span><br><span class=\"line\">            i = cur[<span class=\"number\">0</span>];\tj = cur[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>( <span class=\"number\">0</span>&lt;=i &amp;&amp; i&lt;grid.length &amp;&amp; <span class=\"number\">0</span>&lt;=j &amp;&amp; j&lt;grid[<span class=\"number\">0</span>].length &amp;&amp; grid[i][j]==‘<span class=\"number\">1</span><span class=\"string\">&#x27; )&#123;</span></span><br><span class=\"line\"><span class=\"string\">                grid[i][j] = &#x27;</span><span class=\"number\">0</span><span class=\"string\">&#x27;;</span></span><br><span class=\"line\"><span class=\"string\">                list.add(new int[] &#123; i + 1, j &#125;);</span></span><br><span class=\"line\"><span class=\"string\">                list.add(new int[] &#123; i - 1, j &#125;);</span></span><br><span class=\"line\"><span class=\"string\">                list.add(new int[] &#123; i, j + 1 &#125;);</span></span><br><span class=\"line\"><span class=\"string\">                list.add(new int[] &#123; i, j - 1 &#125;);</span></span><br><span class=\"line\"><span class=\"string\">           \t&#125;</span></span><br><span class=\"line\"><span class=\"string\">        &#125;</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n","prev":{"title":"8.2 创建对象","link":"2021/03/11/JavaScript/8-2-创建对象"},"next":{"title":"双端队列","link":"2021/03/11/数据结构/循环队列"},"plink":"http://example.com/2021/03/11/刷题日记/每日一题：LC200 岛屿数量/","toc":[{"id":"每日一题：lc200-岛屿数量","title":"每日一题：LC200 岛屿数量","index":"1"},{"id":"使用深度优先搜索（dfs）","title":"使用深度优先搜索（DFS）","index":"2","children":[{"id":"引入—二叉树上的dfs","title":"引入—二叉树上的DFS","index":"2.1"},{"id":"避免重复遍历","title":"避免重复遍历","index":"2.2"},{"id":"总结","title":"总结","index":"2.3"}]},{"id":"使用广度优先搜索（bfs）","title":"使用广度优先搜索（BFS）","index":"3"}]}