{"title":"优先队列（Priority Queue）","date":"2021-07-07T16:00:00.000Z","date_formatted":{"ll":"Jul 8, 2021","L":"07/08/2021","MM-DD":"07-08"},"link":"2021/07/08/数据结构/优先队列（Priority Queue）","categories":["Data Structure"],"updated":"2021-07-13T05:55:41.770Z","content":"<h1 id=\"优先队列（priority-queue）\">优先队列（Priority Queue）<a title=\"#优先队列（priority-queue）\" href=\"#优先队列（priority-queue）\"></a></h1>\n<ul>\n<li><strong><code>PriorityQueue</code>的<code>peek()</code>和<code>element</code>操作是常数时间<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.977ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewbox=\"0 -863.1 2143 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">O(n)</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4F\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-4F\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"763\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"1153\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"1753\" y=\"0\"/>\n</g>\n</svg></strong></li>\n<li><strong><code>add()</code>，<code>offer()</code>，<code>remove()</code>和<code>poll()</code>方法都是<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"6.81ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewbox=\"0 -863.1 2932 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">log(N)</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6C\" d=\"M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6F\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-67\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4E\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-6C\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6F\" x=\"298\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-67\" x=\"784\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"1264\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-4E\" x=\"1654\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"2542\" y=\"0\"/>\n</g>\n</svg></strong></li>\n</ul>\n<p><code>PriorityQueue</code>类在Java 1.5中引入并作为 Java Collection Framework的一部分。</p>\n<p><code>PriorityQueue</code>是<strong>基于优先堆</strong>的一个无界队列，这个优先队列中的元素可以**默认自然排序或通过提供的<code>Comparator</code>（比较器）**在队列实例化的时候排序。</p>\n<ul>\n<li>\n<p>优先队列不允许空值，且不支持<code>non-comparable</code>（不可比较）的对象，比如用户自定义的类。优先队列要求使用<code>Java Comparable</code>和<code>Comparator</code>接口给对象排序。</p>\n</li>\n<li>\n<p>优先队列的头是基于自然排序或者<code>Comparator</code>排序的最小元素。如果有多个对象拥有同样的排序，那么就可能随机地取其中任意一个。当我们获取队列时，返回队列的头对象。</p>\n</li>\n<li>\n<p>优先队列大小不受限制，创建时可以制定初始大小，当我们向优先队列增加元素时，队列大小会自动增加。</p>\n</li>\n<li>\n<p><code>PriorityQueue</code>非线程安全，所以Java提供了<code>PriorityBlockingQueue</code>（实现BlockQueue接口），用于Java多线程环境。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Comparator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.PriorityQueue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Queue;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PriorityQueueExample</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tQueue&lt;Integer&gt; </span><br><span class=\"line\"> </span><br></pre></td></tr></table></figure>\n<h2 id=\"实现原理\">实现原理<a title=\"#实现原理\" href=\"#实现原理\"></a></h2>\n<p>Java中PriorityQueue通过<strong>二叉小顶堆</strong>实现，可以用一颗完全二叉树表示（任意一个非叶子节点的权值，都不大于其左右子节点的权值），也就意味着可以通过数组来作为<code>PrioirityQueue</code>的底层实现。</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/939998/201605/939998-20160512205540484-823563038.png\" alt=\"PriorityQueue_base.png\" class=\"φbs\"></p>\n<h2 id=\"方法\">方法<a title=\"#方法\" href=\"#方法\"></a></h2>\n<h3 id=\"**-add()-与-offer()**\">** <code>add()</code> 与 <code>offer()</code>**<a title=\"#**-add()-与-offer()**\" href=\"#**-add()-与-offer()**\"></a></h3>\n<p>语义相同，都是向优先队列中插入元素，但是二者对插入失败时的处理方式不同，前者插入失败时抛出异常，后者返回<code>false</code>，对<code>PriorityQueue</code>这两个方法其实没有什么区别。</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/939998/201605/939998-20160512205600890-346195840.png\" alt=\"PriorityQueue_offer.png\" class=\"φbs\"></p>\n<p><strong><code>siftUp()</code>方法，该方法用于插入元素x并维持堆的特性</strong>：</p>\n<p>从k指定的位置开始,将x逐层与当前点的<code>parent</code>进行比较并交换，直到满足<code>x&gt;=queue[parent]</code>为止。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">siftUp</span><span class=\"params\">(<span class=\"keyword\">int</span> k, E x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// &gt;&gt;&gt;代表无符号右移，忽略符号位，空位都以0补齐</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> parent = (k-<span class=\"number\">1</span>) &gt;&gt;&gt; <span class=\"number\">1</span>; <span class=\"comment\">//parentNo = (nodeNo-1)/2</span></span><br><span class=\"line\">        Object e = queue[parent];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(comparator.compare(x, (E) e) &gt;= <span class=\"number\">0</span>)\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        queue[k] = e;</span><br><span class=\"line\">        k = parent;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    queue[k] = x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>初始：k=10</p>\n<p>第一次迭代：parent = 4, e = 9, queue[10] = 9, k=4;</p>\n<p>第二次迭代：parent = 1, e = 5, queue[4] = 5, k=1;</p>\n<p>第三次迭代：parent = 0, e = 3, e&lt;x, break, queue[1] = 4;</p>\n<h3 id=\"element()与peek()\"><code>element()</code>与<code>peek()</code><a title=\"#element()与peek()\" href=\"#element()与peek()\"></a></h3>\n<p>二者的语义完全相同，都是获取但不删除队首元素。当<code>element()</code>方法失败的时候抛出异常，当<code>peek()</code>方法失败的时候返回<code>null</code>。根据小顶堆性质，堆顶的元素就是全局最小的那个，由于堆用数组表示，因此直接返回数组下标为0处的那个元素即可。</p>\n<h3 id=\"remove()与poll()\"><code>remove()</code>与<code>poll()</code><a title=\"#remove()与poll()\" href=\"#remove()与poll()\"></a></h3>\n<p>二者的语义也完全相同，都是获取并删除队首元素。区别是当方法失败的时候前者抛出异常，后者返回<code>null</code>。由于删除操作会改变队列的结构，为维护小顶堆的性质，需要进行必要的调整。</p>\n<p><img src=\"https://images2015.cnblogs.com/blog/939998/201605/939998-20160512205634609-402016454.png\" alt=\"PriorityQueue_poll.png\" class=\"φbs\"></p>\n<p><strong><code>siftDown()</code>方法的作用是从k指定的位置开始，将x逐层向下与当前点的左右孩子中较小的那个交换，直到x小于或等于左右孩子中的任意一个为止。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">siftDown</span><span class=\"params\">(<span class=\"keyword\">int</span> k, E x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> half = size &gt;&gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(k&lt;half)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> child = (k &lt;&lt; <span class=\"number\">1</span>) + <span class=\"number\">1</span>; <span class=\"comment\">//leftNo = parentNo*2+1</span></span><br><span class=\"line\">        Object c = queue[child];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = child+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(right&lt;size &amp;&amp; comparator.compare((E) c, (E) queue[right])&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">            c = queue[child = right];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(comparator.compare(x, (E) c) &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        queue[k] = c;<span class=\"comment\">//然后用c取代原来的值</span></span><br><span class=\"line\">        k = child;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    queue[k] = x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","prev":{"title":"每日一题：LC930 和相同的二元子数组","link":"2021/07/08/刷题日记/每日一题：LC930 和相同的二元子数组"},"next":{"title":"Java note","link":"2021/07/07/Java/Java note"},"plink":"http://example.com/2021/07/08/数据结构/优先队列（Priority Queue）/","toc":[{"id":"优先队列（priority-queue）","title":"优先队列（Priority Queue）","index":"1","children":[{"id":"实现原理","title":"实现原理","index":"1.1"},{"id":"方法","title":"方法","index":"1.2","children":[{"id":"**-add()-与-offer()**","title":"** add() 与 offer()**","index":"1.2.1"},{"id":"element()与peek()","title":"element()与peek()","index":"1.2.2"},{"id":"remove()与poll()","title":"remove()与poll()","index":"1.2.3"}]}]}]}