{"title":"每日一题：LC297 二叉树的序列化与反序列化","date":"2021-06-29T16:00:00.000Z","date_formatted":{"ll":"Jun 30, 2021","L":"06/30/2021","MM-DD":"06-30"},"link":"2021/06/30/刷题日记/每日一题：LC297 二叉树的序列化与反序列化","categories":["Algorithm"],"updated":"2021-07-01T07:01:40.204Z","content":"<h1 id=\"每日一题：lc297-二叉树的序列化与反序列化\">每日一题：LC297 二叉树的序列化与反序列化<a title=\"#每日一题：lc297-二叉树的序列化与反序列化\" href=\"#每日一题：lc297-二叉树的序列化与反序列化\"></a></h1>\n<p><a href=\"https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/\" target=\"_blank\">297. 二叉树的序列化与反序列化</a>-Medium</p>\n<p>本文内容主要参考：</p>\n<ol>\n<li>\n<p><a href=\"https://leetcode-cn.com/u/xiao_ben_zhu/\" target=\"_blank\">笨猪爆破组L6</a></p>\n<p>本题解真的非常好。</p>\n</li>\n</ol>\n<h2 id=\"dfs前序遍历+dfs反序列化\">DFS前序遍历+DFS反序列化<a title=\"#dfs前序遍历+dfs反序列化\" href=\"#dfs前序遍历+dfs反序列化\"></a></h2>\n<ul>\n<li>在需要对一颗二叉树进行序列化和反序列化的时候，遇到null节点也需要将其记录为特定的符号，这样反序列化的时候才能知道这里是<code>null</code>。</li>\n<li>在使用DFS思想完成此类题目时，应该使用前序遍历，<code>根|左|右</code> 的打印顺序在进行反序列化的时候能够更容易地反映出根节点的值。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> serialize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root==<span class=\"literal\">null</span>)  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;X&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> left = serialize(root.left);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> right = serialize(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root.val + <span class=\"string\">&#x27;,&#x27;</span> + left + <span class=\"string\">&#x27;,&#x27;</span> + right;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> deserialize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = data.split(<span class=\"string\">&#x27;,&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> buildTree = <span class=\"function\">(<span class=\"params\">list</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> letter = list.shift();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(letter == <span class=\"string\">&#x27;X&#x27;</span>)   <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> treeNode = <span class=\"keyword\">new</span> TreeNode(letter);</span><br><span class=\"line\">        treeNode.left = buildTree(list);</span><br><span class=\"line\">        treeNode.right = buildTree(list);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> treeNode;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> buildTree(list);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>时间复杂度：<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.977ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewbox=\"0 -863.1 2143 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">O(n)</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4F\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-4F\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"763\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"1153\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"1753\" y=\"0\"/>\n</g>\n</svg>，在序列化和反序列化函数中，我们只访问每个节点一次，因此时间复杂度是<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.977ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewbox=\"0 -863.1 2143 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">O(n)</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4F\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-4F\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"763\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"1153\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"1753\" y=\"0\"/>\n</g>\n</svg>，其中<code>n</code>为节点数，即数的大小。</li>\n<li>空间复杂度：在序列化和反序列化函数中，我们递归会使用栈空间，因此空间复杂度为<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.977ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewbox=\"0 -863.1 2143 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">O(n)</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4F\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-4F\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"763\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"1153\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"1753\" y=\"0\"/>\n</g>\n</svg>。</li>\n</ul>\n<h2 id=\"bfs层序遍历序列化+bfs反序列化\">BFS层序遍历序列化+BFS反序列化<a title=\"#bfs层序遍历序列化+bfs反序列化\" href=\"#bfs层序遍历序列化+bfs反序列化\"></a></h2>\n<ul>\n<li>与DFS遍历生成的序列化字符串不同，BFS得到的是层序遍历的序列化字符串。</li>\n<li>在反序列化的时候，注意也要使用一个<code>queue</code>，同时使用<code>cursor</code>做到一次性考察一对儿子（从<code>queue</code>中<code>shift</code>出来的左节点和右节点）。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> serialize = <span class=\"function\">(<span class=\"params\">root</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> queue = [root];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (queue.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> node = queue.shift(); <span class=\"comment\">// 考察出列的节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node) &#123;                 <span class=\"comment\">// 是真实节点，带出子节点入列</span></span><br><span class=\"line\">      res.push(node.val);       <span class=\"comment\">// 节点值推入res</span></span><br><span class=\"line\">      queue.push(node.left);    <span class=\"comment\">// 子节点入列，不管是不是null节点都入列</span></span><br><span class=\"line\">      queue.push(node.right);    </span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;                    <span class=\"comment\">// 是null节点，没有子节点入列</span></span><br><span class=\"line\">      res.push(<span class=\"string\">&#x27;X&#x27;</span>);            <span class=\"comment\">// X 推入res</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res.join(<span class=\"string\">&#x27;,&#x27;</span>);  <span class=\"comment\">// 转成字符串</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> deserialize = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (data == <span class=\"string\">&#x27;X&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> list = data.split(<span class=\"string\">&#x27;,&#x27;</span>);  <span class=\"comment\">// 序列化字符串split成数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> root = <span class=\"keyword\">new</span> TreeNode(list[<span class=\"number\">0</span>]); <span class=\"comment\">// 获取首项，构建根节点</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> queue = [root];          <span class=\"comment\">// 根节点推入队列</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> cursor = <span class=\"number\">1</span>;                <span class=\"comment\">// 初始指向list第二项</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (cursor &lt; list.length) &#123; <span class=\"comment\">// 指针越界，即扫完了序列化字符串</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> node = queue.shift();  <span class=\"comment\">// 考察出列的节点</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> leftVal = list[cursor];      <span class=\"comment\">// 它的左儿子的值</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> rightVal = list[cursor + <span class=\"number\">1</span>]; <span class=\"comment\">// 它的右儿子的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftVal != <span class=\"string\">&#x27;X&#x27;</span>) &#123;              <span class=\"comment\">// 是真实节点</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> leftNode = <span class=\"keyword\">new</span> TreeNode(leftVal); <span class=\"comment\">// 创建左儿子节点</span></span><br><span class=\"line\">      node.left = leftNode;                   <span class=\"comment\">// 认父亲</span></span><br><span class=\"line\">      queue.push(leftNode);                   <span class=\"comment\">// 自己也是父亲，入列</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rightVal != <span class=\"string\">&#x27;X&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> rightNode = <span class=\"keyword\">new</span> TreeNode(rightVal);</span><br><span class=\"line\">      node.right = rightNode;</span><br><span class=\"line\">      queue.push(rightNode);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cursor += <span class=\"number\">2</span>; <span class=\"comment\">// 一次考察一对儿子，指针加2</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> root;  <span class=\"comment\">// BFS结束，构建结束，返回根节点</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>时间复杂度：序列化和反序列化都是<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.977ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewbox=\"0 -863.1 2143 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">O(n)</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4F\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-4F\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"763\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"1153\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"1753\" y=\"0\"/>\n</g>\n</svg></li>\n<li>空间复杂度：同<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.977ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewbox=\"0 -863.1 2143 1223.9\" role=\"img\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" aria-labelledby=\"MathJax-SVG-1-Title\">\n<title id=\"MathJax-SVG-1-Title\">O(n)</title>\n<defs aria-hidden=\"true\">\n<path stroke-width=\"1\" id=\"E1-MJMATHI-4F\" d=\"M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMATHI-6E\" d=\"M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z\"/>\n<path stroke-width=\"1\" id=\"E1-MJMAIN-29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"/>\n</defs>\n<g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\" aria-hidden=\"true\">\n <use xlink:href=\"#E1-MJMATHI-4F\" x=\"0\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-28\" x=\"763\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMATHI-6E\" x=\"1153\" y=\"0\"/>\n <use xlink:href=\"#E1-MJMAIN-29\" x=\"1753\" y=\"0\"/>\n</g>\n</svg></li>\n</ul>\n","prev":{"title":"各种排序算法（Sorting Algorithm）","link":"2021/07/02/算法/各种排序算法"},"next":{"title":"每日一题：LC236 二叉树的最近公共祖先","link":"2021/06/11/刷题日记/每日一题：LC236 二叉树的最近公共祖先"},"plink":"http://example.com/2021/06/30/刷题日记/每日一题：LC297 二叉树的序列化与反序列化/","toc":[{"id":"每日一题：lc297-二叉树的序列化与反序列化","title":"每日一题：LC297 二叉树的序列化与反序列化","index":"1","children":[{"id":"dfs前序遍历+dfs反序列化","title":"DFS前序遍历+DFS反序列化","index":"1.1"},{"id":"bfs层序遍历序列化+bfs反序列化","title":"BFS层序遍历序列化+BFS反序列化","index":"1.2"}]}]}